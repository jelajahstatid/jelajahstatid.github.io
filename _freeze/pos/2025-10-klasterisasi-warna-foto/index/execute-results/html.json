{
  "hash": "93c6f6c107eac08278f3bd6b27980590",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Klasterisasi Warna Foto\"\nsubtitle: \"Manipulasi Foto dengan Klasterisasi K-Rerata\"\ndescription: \"Bagaimana mengurangi variasi warna dalam sebuah foto? Salah satu caranya adalah dengan menerapkan klasterisasi k-rerata. Dengan metode ini, foto tersebut akan tersusun hanya dalam k warna. Ide dasar dan cara detailnya dijelaskan dalam artikel ini.\"\nauthor:\n  - name: Yosep Dwi Kristanto\n    url: https://people.usd.ac.id/~ydkristanto/\n    affiliation: Pendidikan Matematika, Universitas Sanata Dharma, Yogyakarta\n    affiliation-url: https://www.usd.ac.id/s1pmat\n    orcid: 0000-0003-1446-0422\ndate: 2025-10-01\ncategories:\n  - klasterisasi\n  - tutorial\n  - fotografi\nimage: \"sampul-klasterisasi-warna.png\"\nimage-alt: \"Gambar yang menunjukkan sebuah foto asli dan hasil pereduksian warnanya dengan menggunakan klasterisasi k-rerata\"\nkeywords: \n  - fotografi\n  - klasterisasi\n  - klasterisasi k-rerata\n  - machine learning\n  - pemelajaran mesin\n  - pemelajaran statistik\n  - statistical learning\nlightbox: true\ncopyright: \"© 2025 Yosep Dwi Kristanto\"\nlicense: \"CC BY\"\ncode-annotations: select\neditor_options: \n  chunk_output_type: console\n---\n\nApa yang kamu lihat dari sebuah foto? Mungkin kamu melihat kenangan yang tersimpan. Mungkin kamu juga ingin menggali pesan yang tersirat. Oke, mari kita melihat sebuah foto atau gambar dari sudut pandang yang berbeda! Kita dapat melihat sebuah gambar sebagai matriks.\n\n![Meme seseorang yang menatap selembar kertas mungil secara intens](aset/epsilon_terlalu_kecil-01.png){#fig-meme-epsilon fig-alt=\"Meme orang yang menatap selembar kertas mungil secara intens\"}\n\nPerhatikan @fig-meme-epsilon! Apa yang dilihat oleh orang dalam meme pada @fig-meme-epsilon? Karena terlalu kecil, mari kita memperbesarnya dan menaruhnya ke bidang koordinat Kartesius. Kita lakukan hal itu dengan [pemrograman R](https://www.R-project.org/ \"R: A Language and Environment for Statistical Computing\"){.external target=\"_blank\"}. Untuk itu, kita panggil paket-paket yang kita perlukan seperti pada @lst-muat-paket.\n\n\n::: {.cell}\n\n```{#lst-muat-paket .r .cell-code  lst-cap=\"Memuat paket-paket yang diperlukan\" code-fold=\"show\"}\nlibrary(magick)\nlibrary(tidyverse)\nlibrary(scatterplot3d)\nlibrary(scales)\nlibrary(cowplot)\n```\n:::\n\n\nPaket-paketnya telah siap. Kita lanjut memperbesar gambar yang dilihat oleh orang dalam meme tersebut dan memposisikannya dalam bidang koordinat Kartesius. Perhatikan @fig-matriks-epsilon!\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Gambar epsilon berukuran 8 piksel × 8 piksel pada bidang koordinat Kartesius](index_files/figure-html/fig-matriks-epsilon-1.png){#fig-matriks-epsilon width=672}\n:::\n:::\n\n\nSekarang, apa yang kamu amati dari @fig-matriks-epsilon? Ternyata itu adalah simbol epsilon. Meskipun tampak kabur, piksel-piksel epsilon tersebut tampak jelas. Setiap piksel berkorespondensi dengan satu warna. Warna tersebut dapat dinyatakan ke dalam tiga warna dasarnya, yaitu RGB (*red*, *green*, dan *blue*). Dengan demikian, kita dapat menyatakan gambar tersebut sebagai tiga matriks warna dasar: $R$, $G$, dan $B$.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Matriks R\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       1   2   3   4   5   6   7   8\n[1,] 171 177 181 183 183 181 177 172\n[2,] 177 183 156  53 117  67 138 177\n[3,] 181 189  90  73 201 129 128 182\n[4,] 183 192 163  58 140 174 192 184\n[5,] 183 148  30 133 208 201 192 184\n[6,] 181  91  23 197 149  49 189 182\n[7,] 177 153  50 119  77 122 183 177\n[8,] 172 177 182 184 184 182 177 172\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Matriks G\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       1   2   3   4   5   6   7   8\n[1,] 200 204 207 209 208 207 204 201\n[2,] 204 208 184  98 151 110 170 204\n[3,] 207 212 129 114 220 161 161 208\n[4,] 209 214 188 101 169 198 214 209\n[5,] 209 177  78 163 225 220 214 209\n[6,] 207 130  73 217 177  94 212 208\n[7,] 204 183  96 153 118 156 208 204\n[8,] 201 204 208 209 209 208 204 201\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Matriks B\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       1   2   3   4   5   6   7   8\n[1,] 209 212 215 216 216 215 212 209\n[2,] 212 216 195 121 166 131 183 212\n[3,] 215 219 148 135 225 174 175 215\n[4,] 216 220 198 124 182 206 220 216\n[5,] 216 189 104 177 229 225 220 216\n[6,] 215 148 100 222 188 118 219 215\n[7,] 212 194 119 168 138 171 216 212\n[8,] 209 212 215 216 216 215 212 209\n```\n\n\n:::\n:::\n\n\n*Okay*, kita telah dapat melihat sebuah gambar dengan menggunakan matriks-matriks $R$, $G$, dan $B$. Kita dapat memasangkan nilai-nilai yang bersesuaian dari matriks tersebut sebagai triplet. Misalnya, komponen pada baris pertama dan kolom pertama dalam matriks-matriks $R$, $G$, dan $B$, secara berturut-turut adalah 171, 200, dan 209. Dengan demikian, kita mendapatkan satu triplet $\\left( 171,200,209 \\right)$. Dengan cara ini, kita juga dapat membuat 63 triplet lainnya.\n\nSekarang kita memiliki 64 triplet. Semua triplet yang merepresentasikan warna tersebut dapat kita plot dalam ruang dimensi tiga. Hasilnya ditunjukkan pada @fig-ruang-warna-epsilon.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Titik-titik dalam ruang yang merepresentasikan warna dalam gambar epsilon](index_files/figure-html/fig-ruang-warna-epsilon-1.png){#fig-ruang-warna-epsilon width=672}\n:::\n:::\n\n\nNah, sekarang kita dapat melihat sebuah gambar atau foto dengan menggunakan matriks, yaitu tiga matriks warna dasarnya. Dari tiga matriks tersebut, kita dapat mengkonstruksi titik-titik yang merepresentasikan warna tersebut ke dalam ruang dimensi tiga. Kita gunakan perspektif seperti ini untuk memanipulasi sebuah foto sehingga variasi warnanya tereduksi. Tujuan kita berikutnya adalah untuk membuat foto @fig-karuna-donau-asli menjadi @fig-karuna-donau-4-warna. Hal ini telah dijanjikan pada [pos sebelumnya](/pos/2025-09-klasterisasi-k-rerata/index.qmd \"Klasterisasi K-Rerata: Langkah Demi Langkah Klasterisasi dengan Pemrograman R\").\n\n::: {#fig-foto-asli-dan-hasil-klasterisasi layout-ncol=\"2\"}\n![Foto asli](aset/karuna_donau_tile.png){#fig-karuna-donau-asli}\n\n![Hasil reduksi menjadi empat warna](aset/karuna_donau_4_warna.png){#fig-karuna-donau-4-warna}\n\nFoto asli dan hasil reduksinya menjadi 4 warna\n:::\n\nBagaimana cara mencapai tujuan tersebut? Mari kita bahas gambaran umumnya terlebih dahulu pada bagian berikutnya.\n\n## Ide Dasar {#sec-ide-dasar}\n\nUntuk menyerhanakan warna foto pada @fig-karuna-donau-asli, kita gunakan perspektif yang telah dibahas pada bagian sebelumnya. Setelah itu, kita terapkan klasterisasi $k$-rerata terhadap titik-titik warna yang dihasilkan. Secara umum, tahapan-tahapan utama yang nanti kita lakukan adalah sebagai berikut.\n\n-   Mengekstrak data warna R, G, dan B dari foto.\n\n-   Klasterisasi $k$-rerata terhadap data warna.\n\n-   Mengganti setiap warna pada foto asli dengan pusat klasternya.\n\nDengan cara seperti itu, kita akan mendapatkan sebuah foto yang hanya memuat $k$ warna. Warna-warna itu diperoleh dari pusat klaster-klaster yang terbentuk. Tak perlu berlama-lama, mari kita mulai tahapan pertamanya.\n\n## Mengekstrak Data Warna {#sec-mengekstrak-data-warna}\n\nTahapan pertamanya adalah mengestrak data warna dari sebuah foto. Foto awal yang kita gunakan adalah foto pada @fig-karuna-donau-asli. Untuk melakukannya, kita gunakan kode pada @lst-ekstrak-warna.\n\n\n::: {.cell}\n\n```{#lst-ekstrak-warna .r .cell-code  lst-cap=\"Membuat data warna dari foto\" code-fold=\"show\"}\n# Memuat dan menskala gambar\nfoto_ku <- image_read(\n  \"aset/karuna_donau.png\"\n) |> \n  image_scale(\"256x256!\")\n\n# Ekstrak data mentah piksel\ndata_mentah_foto <- image_data(foto_ku)\n\n# Ukuran foto\nlebar_foto  <- dim(data_mentah_foto)[2]\ntinggi_foto <- dim(data_mentah_foto)[3]\n\n# Konversi ke data frame dan membalik koordinat y\nrgb_foto_df <- as.data.frame.table(data_mentah_foto, responseName = \"nilai\") |>\n  mutate(\n    kanal = as.integer(Var1),\n    koord_x = as.integer(Var2),\n    koord_y = as.integer(Var3),\n    nilai   = as.integer(nilai)\n  ) |>\n  select(kanal, koord_x, koord_y, nilai) |>\n  pivot_wider(\n    names_from = kanal,\n    values_from = nilai,\n    names_prefix = \"ch\"\n  ) |>\n  transmute(\n    koord_x,\n    koord_y = tinggi_foto - koord_y + 1,\n    R = ch1,\n    G = ch2,\n    B = ch3,\n    R_norm = R / 255,\n    G_norm = G / 255,\n    B_norm = B / 255,\n    warna_hex = rgb(R_norm, G_norm, B_norm)\n  )\n head(rgb_foto_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 9\n  koord_x koord_y     R     G     B R_norm G_norm B_norm warna_hex\n    <int>   <dbl> <int> <int> <int>  <dbl>  <dbl>  <dbl> <chr>    \n1       1     256   117   171   233  0.459  0.671  0.914 #75ABE9  \n2       2     256   117   173   234  0.459  0.678  0.918 #75ADEA  \n3       3     256   116   172   233  0.455  0.675  0.914 #74ACE9  \n4       4     256   116   172   233  0.455  0.675  0.914 #74ACE9  \n5       5     256   115   170   234  0.451  0.667  0.918 #73AAEA  \n6       6     256   120   171   234  0.471  0.671  0.918 #78ABEA  \n```\n\n\n:::\n:::\n\n\nDari kode di atas, kita mendapatkan data warna `rgb_foto_df`. Data tersebut memuat koordinat piksel-pikselnya (`koord_x` dan `koord_y`), warna dasar setiap pikselnya (`R`, `G`, dan `B`), dan warna-warna dasar tersebut yang telah diskala agar minimumnya 0 dan maksimumnya 1 (`R_norm`, `G_norm`, dan `B_norm`). Selain itu, kita juga membuat kolom `warna_hex` untuk merangkum informasi warna pada kolom-kolom `R`, `G`, dan `B`.\n\nMari kita selami `rgb_foto_df` lebih mendalam. Untuk itu, kita gambarkan diagram pencar untuk variabel-variabel warnanya, yaitu `R`, `G`, dan `B`. Perhatikan @fig-ruang-warna-foto!\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Titik-titik dalam ruang yang merepresentasikan warna dalam foto](index_files/figure-html/fig-ruang-warna-foto-1.png){#fig-ruang-warna-foto width=672}\n:::\n:::\n\n\n## Klasterisasi $K$-Rerata {#sec-klasterisasi-k-rerata}\n\nSelanjutnya, kita lakukan klasterisasi terhadap `rgb_foto_df` dengan menggunakan variabel-variabel `R_norm`, `G_norm`, dan `B_norm`. Untuk melakukannya, kita menggunakan fungsi `kmeans()`. Fungsi ini menggunakan input sebuah matriks. Oleh karena itu, terlebih dahulu kita membuat matriks tersebut. Matriks tersebut memuat tiga kolom, yaitu `R_norm`, `G_norm`, dan `B_norm`. Perhatikan @lst-matriks-foto!\n\n\n::: {.cell}\n\n```{#lst-matriks-foto .r .cell-code  lst-cap=\"Membuat matriks\" code-fold=\"show\"}\nmatriks_foto <- rgb_foto_df |> \n  select(R_norm, G_norm, B_norm) |> \n  as.matrix()\n```\n:::\n\n\nKita telah memperoleh `matriks_foto`. Kita siap untuk melakukan klasterisasi $k$-rerata dengan fungsi `kmeans()`. Perhatikan @lst-kmeans-foto.\n\n\n::: {.cell}\n\n```{#lst-kmeans-foto .r .cell-code  lst-cap=\"Klasterisasi k-rerata terhadap `matriks_foto`\" code-fold=\"show\"}\nset.seed(123)\n\n# Pilih nilai k\nk <- 4\n\n# Lakukan klasterisasi k-rerata\nhasil_krerata <- kmeans(\n  x = matriks_foto,\n  centers = k\n)\n```\n:::\n\n\nHasil klasterisasi tersebut kita simpan sebagai sebuah objek dengan nama `hasil_krerata`. Terdapat informasi penting yang terkandung dalam `hasil_krerata`, yaitu `cluster` (klaster) dan `centers` (pusat setiap klaster). Kedua informasi tersebut berguna untuk mengidentifikasi klaster-klaster warnanya dan menyederhanakan warna-warnanya dengan pusat klasternya.\n\nSekarang, kita membuat `rgb_foto_klaster_df` yang memuat informasi klaster dan pusatnya tersebut dalam kolom-kolom `klaster` dan `pusat_hex`. Perhatikan @lst-menyisipkan-klaster. Untuk melihat beberapa baris awalnya, kita terapkan `head()` pada data tersebut.\n\n\n::: {.cell}\n\n```{#lst-menyisipkan-klaster .r .cell-code  lst-cap=\"Membuat data yang memuat informasi klaster dan warna pusat klaster\" code-fold=\"show\"}\nrgb_foto_klaster_df <- rgb_foto_df |> \n  mutate(\n    klaster = hasil_krerata$cluster,\n    pusat_R = hasil_krerata$centers[klaster, \"R_norm\"],\n    pusat_G = hasil_krerata$centers[klaster, \"G_norm\"],\n    pusat_B = hasil_krerata$centers[klaster, \"B_norm\"]\n  ) |> \n  mutate(\n    pusat_hex = rgb(pusat_R, pusat_G, pusat_B)\n  ) |> \n  select(koord_x, koord_y, R, G, B, warna_hex, klaster, pusat_hex)\n\nhead(rgb_foto_klaster_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  koord_x koord_y     R     G     B warna_hex klaster pusat_hex\n    <int>   <dbl> <int> <int> <int> <chr>       <int> <chr>    \n1       1     256   117   171   233 #75ABE9         3 #84B4DE  \n2       2     256   117   173   234 #75ADEA         3 #84B4DE  \n3       3     256   116   172   233 #74ACE9         3 #84B4DE  \n4       4     256   116   172   233 #74ACE9         3 #84B4DE  \n5       5     256   115   170   234 #73AAEA         3 #84B4DE  \n6       6     256   120   171   234 #78ABEA         3 #84B4DE  \n```\n\n\n:::\n:::\n\n\nDari data yang telah kita buat di atas, kita dapat memvisualisasikan warna-warna yang masuk ke dalam setiap klasternya. Perhatikan @fig-heatmap-klaster-warna!\n\n\n::: {#fig-heatmap-klaster-warna .cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![Klaster 1](index_files/figure-html/fig-heatmap-klaster-warna-1.png){#fig-heatmap-klaster-warna-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Klaster 2](index_files/figure-html/fig-heatmap-klaster-warna-2.png){#fig-heatmap-klaster-warna-2 width=672}\n:::\n\n::: {.cell-output-display}\n![Klaster 3](index_files/figure-html/fig-heatmap-klaster-warna-3.png){#fig-heatmap-klaster-warna-3 width=672}\n:::\n\n::: {.cell-output-display}\n![Klaster 4](index_files/figure-html/fig-heatmap-klaster-warna-4.png){#fig-heatmap-klaster-warna-4 width=672}\n:::\n\nKlaster dan warna-warna anggotanya\n:::\n\n\n## Menyederhanakan Warna {#sec-menyederhanakan-warna}\n\nTiba saatnya kita menyederhanakan warna. Caranya adalah dengan mengganti setiap warna dengan pusat klasternya. Mari kita lihat kembali `rgb_foto_klaster_df`. Data ini hanya memuat $k=4$ warna, seperti yang ditunjukkan pada luaran @lst-melihat-ringkasan berikut.\n\n\n::: {.cell}\n\n```{#lst-melihat-ringkasan .r .cell-code  lst-cap=\"Melihat warna pusat klaster unik dan banyaknya\" code-fold=\"show\"}\nrgb_foto_klaster_df |> \n  group_by(pusat_hex) |> \n  summarise(\n    n = n()\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  pusat_hex     n\n  <chr>     <int>\n1 #47403B   27742\n2 #5E7481   12175\n3 #84B4DE   19353\n4 #D0B78E    6266\n```\n\n\n:::\n:::\n\n\nKita dapat melihat kembali titik-titik warnanya ke dalam ruang dimensi tiga agar dapat mengamati hasil klasterisasi warnanya. Perhatikan @fig-ruang-warna-klaster-foto!\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Titik-titik dalam ruang yang merepresentasikan warna dalam foto setelah klasterisasi](index_files/figure-html/fig-ruang-warna-klaster-foto-1.png){#fig-ruang-warna-klaster-foto width=672}\n:::\n:::\n\n\nSekarang, kita gambarkan kembali piksel-piksel dalam `rgb_foto_klaster_df` pada bidang koordinat Kartesius dengan kode pada @lst-klasterisasi-4-warna-foto. Hasilnya ditunjukkan pada @fig-foto-warna-klaster.\n\n\n::: {.cell}\n\n```{#lst-klasterisasi-4-warna-foto .r .cell-code  lst-cap=\"Memplot piksel-piksel foto dengan pereduksian warna\" code-fold=\"show\"}\nrgb_foto_klaster_df |> \n  ggplot(\n    aes(x = koord_x, y = koord_y, fill = pusat_hex)\n  ) +\n  geom_tile() +\n  scale_fill_identity() +\n  coord_equal() +\n  theme_minimal() + \n  theme(\n    axis.title = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![Penyederhanaan foto asli yang awalnya memiliki hampir 40 ribu warna menjadi $k=4$.](index_files/figure-html/fig-foto-warna-klaster-1.png){#fig-foto-warna-klaster width=672}\n:::\n:::\n\n\nSampai di sini kita telah berhasil mereduksi variasi warna dari sebuah foto. Teknik yang telah kita lakukan tersebut tentu juga dapat diterapkan dengan $k$ yang berbeda. Misalnya, kita juga dapat melakukannya dengan $k$ = 16 dan 2. Hasilnya disajikan pada @fig-foto-asli-klaster-16-4-2.\n\n\n::: {#fig-foto-asli-klaster-16-4-2 .cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![Foto asli](index_files/figure-html/fig-foto-asli-klaster-16-4-2-1.png){#fig-foto-asli-klaster-16-4-2-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Klasterisasi dengan k = 16](index_files/figure-html/fig-foto-asli-klaster-16-4-2-2.png){#fig-foto-asli-klaster-16-4-2-2 width=672}\n:::\n\n::: {.cell-output-display}\n![Klasterisasi dengan k = 4](index_files/figure-html/fig-foto-asli-klaster-16-4-2-3.png){#fig-foto-asli-klaster-16-4-2-3 width=672}\n:::\n\n::: {.cell-output-display}\n![Klasterisasi dengan k = 2](index_files/figure-html/fig-foto-asli-klaster-16-4-2-4.png){#fig-foto-asli-klaster-16-4-2-4 width=672}\n:::\n\nPerbandingan foto asli dan hasil reduksi warnanya dengan klasterisasi k-rerata\n:::\n\n\nMungkin kamu penasaran bagaimana komposisi warna dalam foto yang variasi warnanya sudah berkurang tersebut. Mari kita selidiki dan hasilnya disajikan pada @fig-komposisi-warna.\n\n\n::: {#fig-komposisi-warna .cell layout=\"[[1,1], [1]]\"}\n::: {.cell-output-display}\n![Foto dengan k = 2](index_files/figure-html/fig-komposisi-warna-1.png){#fig-komposisi-warna-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Foto dengan k = 4](index_files/figure-html/fig-komposisi-warna-2.png){#fig-komposisi-warna-2 width=672}\n:::\n\n::: {.cell-output-display}\n![Foto dengan k = 16](index_files/figure-html/fig-komposisi-warna-3.png){#fig-komposisi-warna-3 width=672}\n:::\n\nKomposisi warna pada foto\n:::\n\n\n## Catatan Akhir {#sec-catatan-akhir}\n\nKita telah mereduksi variasi warna dalam sebuah foto dengan menggunakan [klasterisasi $k$-rerata](/pos/2025-09-klasterisasi-k-rerata/index.qmd \"Klasterisasi K-Rerata: Langkah Demi Langkah Klasterisasi dengan Pemrograman R\"). Untuk melakukannya, kita perlu mengetahui bagaimana sebuah foto atau gambar dapat direpresentasikan dengan matriks-matriks warna dasarnya. Setelah itu, kita ekstrak data warna piksel-piksel dalam gambar tersebut. Hal ini kita lakukan pada @sec-mengekstrak-data-warna. Setelah kita mendapatkan data warna tersebut, kita gunakan data tersebut untuk melakukan klasterisasi $k$-rerata (lihat @sec-klasterisasi-k-rerata). Di akhir, kita ubah warna tiap-tiap pikselnya dengan warna pusat klasternya. Dengan cara ini, kita mendapatkan gambar yang hanya tersusun dari $k$ warna. Hasil akhirnya dapat dilihat pada @fig-foto-asli-klaster-16-4-2.\n\nSebagai catatan, kita menggunakan klasterisasi $k$-rerata terhadap titik-titik warna yang dinyatakan ke dalam RGB. Algoritma $k$-rerata tersebut mengandalkan jarak untuk membuat klaster-klaster. Akan tetapi, persepsi kita terhadap warna tidaklah linear di RGB. Dalam RGB, dua warna mungkin memiliki jarak yang dekat, tetapi secara intuitif kita menilai warna tersebut jauh berbeda. Sebaliknya, mungkin ada dua warna yang jauh secara numerik dalam ruang RGB, tetapi bagi kita dua warna itu dekat secara intuitif. Oleh karena itu, kita dapat memilih format warna yang lebih sesuai dengan persepsi kita, misalnya [Lab](https://en.wikipedia.org/wiki/CIELAB_color_space \"CIELAB color space\"){.external target=\"_blank\"}. Silakan gunakan metode yang kamu pelajari di artikel ini, tetapi dengan menggunakan ruang warna Lab.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}