{
  "hash": "9f376ee11bdad89058dded7f92ca77de",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Membuat Diagram Lebih Hidup dengan Animasi\"\ndescription: |\n  Bagaimana menganimasikan diagram statistik? Artikel ini mendemonstrasikan bagaimana menggunakan paket {gganimate} untuk membuat animasi dalam penyajian data yang efisien dan menarik.\nauthor:\n  - name: Yosep Dwi Kristanto\n    url: https://people.usd.ac.id/~ydkristanto/\n    affiliation: Pendidikan Matematika, Universitas Sanata Dharma, Yogyakarta\n    affiliation-url: https://www.usd.ac.id/s1pmat\n    orcid: 0000-0003-1446-0422\ndate: 2024-08-07\ndate-modified: 2024-08-13\ncategories:\n  - tutorial\n  - visualisasi data\nimage: \"animasi.gif\"\nimage-alt: |\n  Animasi yang menunjukkan hubungan antara PDB per kapita dan angka harapan hidup setiap tahunnya.\nkeywords: \n  - animasi\n  - Gapminder\n  - gganimate\n  - harapan hidup\n  - produk domestik bruto\n  - PDB\ncopyright: \"© 2024 Yosep Dwi Kristanto\"\nlicense: \"CC BY\"\ngoogle-scholar: true\neditor_options: \n  chunk_output_type: console\ncode-annotations: select\n---\n\n::: {.cell}\n\n:::\n\n\nUmumnya, diagram itu untuk menyampaikan pesan. Akibatnya, pembuatan diagram perlu disesuaikan dengan pesan yang perlu disampaikan. *Nah*, berdasarkan hal ini, mari kita tinjau kembali sebuah diagram pada [pos sebelumnya](/pos/2024-08-statistik-jendela-dunia/index.qmd \"Statistik Adalah Jendela Dunia\"). @fig-pdb-vs-ahh menyajikan diagram yang dimaksud.\n\n![Hubungan antara PDB per kapita dan angka harapan hidup setiap negara pada tahun 2007](aset/pdb-vs-ahh.png){#fig-pdb-vs-ahh fig-align=\"center\"}\n\n@fig-pdb-vs-ahh sudah baik dalam menunjukkan seperti apa relasi antara PDB per kapita dan angka harapan hidup setiap negara pada tahun 2007. Akan tetapi, bagaimana jika kita ingin menunjukkan relasi tersebut pada tahun-tahun lainnya?\n\nMungkin kita langsung berpikir untuk memvisualisasikan relasi tersebut untuk setiap tahunnya. Dengan demikian, penyajian datanya seperti yang ditunjukkan pada @fig-semua-tahun.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Relasi antara PDB per kapita dan angka harapan hidup setiap negara mulai tahun 1952 sampai 2007](index_files/figure-html/fig-semua-tahun-1.png){#fig-semua-tahun width=672}\n:::\n:::\n\n\n@fig-semua-tahun tersebut tampak sudah sesuai dengan pesan yang ingin kita sampaikan. Akan tetapi, gambar tersebut kurang efisien karena terlalu banyak memuat informasi. Apakah ada metode yang lebih efisien?\n\nPenggunaan animasi adalah salah satu solusinya. Pembuatan animasi tersebut dapat dilakukan di [R](https://www.R-project.org/ \"R: A Language and Environment for Statistical Computing\"){.external target=\"_blank\"} dengan menggunakan paket [{gganimate}](https://CRAN.R-project.org/package=gganimate \"gganimate: A Grammar of Animated Graphics\"){.external target=\"_blank\"}. Tak perlu berlama-lama, mari kita panggil paket tersebut bersamaan dengan paket [{tidyverse}](https://www.tidyverse.org/ \"Welcome to the {tidyverse}\"){.external target=\"_blank\"}. Paket {tidyverse} tersebut berguna untuk mengimpor, mengolah, dan memvisualisasikan data. Sebagai tambahan, sebaiknya dalam R kita juga sudah terinstal paket [{gifski}](https://CRAN.R-project.org/package=gifski \"gifski: Highest Quality GIF Encoder\"){.external target=\"_blank\"}. Paket ini digunakan untuk merender animasi kita nanti menjadi fail gif.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\nlibrary(gganimate)\n```\n:::\n\n\n## Mengkreasi Animasi {#sec-kreasi-animasi}\n\nKita impor dan olah data Gapminder seperti pada [pos sebelumnya](/pos/2024-08-statistik-jendela-dunia/index.qmd \"Statistik Adalah Jendela Dunia\"). Baris kode yang digunakan adalah sebagai berikut.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Impor data `gapminder`\nload(url(\"https://github.com/jennybc/gapminder/raw/main/data/gapminder.rdata\"))\n\n# Menerjemahkan nama benua\nterjemahan_benua <- c(\n  \"Asia\" = \"Asia\",\n  \"Europe\" = \"Eropa\",\n  \"Africa\" = \"Afrika\",\n  \"Americas\" = \"Amerika\",\n  \"Oceania\" = \"Oseania\"\n)\ngapminder <- gapminder |> \n  mutate(\n    continent = recode(continent, !!!terjemahan_benua)\n  )\n\nhead(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n```\n\n\n:::\n:::\n\n\nData `gapminder` sudah siap. Sekarang waktunya untuk membuat animasi. Berikut ini adalah baris kodenya.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nanim <- gapminder |> \n  ggplot(\n    aes(x = gdpPercap, y = lifeExp)\n  ) + \n  geom_point(\n    aes(color = continent, size = pop),\n    alpha = .6\n  ) + \n  scale_size(\n    range = c(1, 20),\n    guide = \"none\"\n  ) + \n  scale_color_viridis_d(name = \"Benua\") + \n  theme_minimal() + \n  theme(\n    legend.position = \"bottom\",\n    plot.title = element_text(face = \"bold\")\n  ) + \n  # Penggunaan {gganimate} mulai dari sini\n  labs(\n    title = \"Tahun: {frame_time}\",\n    x = \"PDB per kapita\",\n    y = \"Angka harapan hidup\"\n  ) + \n  transition_time(year) + \n  ease_aes(\"linear\")\n\nanim\n```\n\n::: {.cell-output-display}\n![Relasi antara PDB per kapita dan angka harapan hidup setiap tahunnya, disajikan dengan animasi](index_files/figure-html/fig-animasi-1.gif){#fig-animasi}\n:::\n:::\n\n\nDari baris kode di atas, kita menggunakan dua fungsi dari {gganimate}. Kedua fungsi tersebut adalah `transition_time()` dan `ease_aes()`. Fungsi `transition_time()` berfungsi untuk membagi data kita berdasarkan kolom/variabel waktu tertentu. Karena data `gapminder` memiliki variabel waktu `year`, kita masukkan variabel ini ke dalam fungsi tersebut.\n\nFungsi `transition_time()` menghasilkan variabel `frame_time`. Variabel ini kita masukkan ke dalam judul diagram agar judul tersebut berubah-ubah di sepanjang animasinya, perhatikan bagian kiri atas @fig-animasi. Penulisan variabel ini ke dalam judul perlu kita masukkan ke dalam kurung kurawal `{ }` agar terbaca sebagai variabel.\n\nFungsi `ease_aes()` mengatur bagaimana perubahan variabel `year`. Pilihan dalam fungsi ini antara lain `quadratic`, `cubic`, dan `quartic`. Bawaannya, argumen awal fungsi ini adalah `linear`.\n\n## Menyimpan Animasi {#sec-simpan-animasi}\n\nSetelah animasi sudah jadi, saatnya kita simpan animasi tersebut. Sebelum kita menyimpannya, kita perlu merender animasi tersebut. Kita dapat merendernya dengan menggunakan `animate()` dan mengisikan argumen `renderer = gifski_renderer()` apabila ingin merendernya menjadi fail gif. Untuk menyimpan hasil animasinya, kita menggunakan fungsi `anim_save()`.\n\n``` r\n# Merender animasi\nanimate(\n  plot = anim,\n  renderer = gifski_renderer()\n)\n\n# Menyimpan animasi\nanim_save(\n  file = \"anim_pdb_harapan_hidup.gif\"\n)\n```\n\nKetika menggunakan fungsi `animate()` dalam merender animasi, kita dapat mengatur beberapa argumen. Misalnya, `nframes`, `fps`, dan `duration`. Untuk lebih jelasnya, silakan kunjungi [laman referensinya](https://gganimate.com/reference/animate.html){.external target=\"_blank\"}.\n\n## Catatan Akhir\n\nKita telah dapat menyajikan data yang kompleks secara sederhana dengan animasi. Dalam R, kita dapat menggunakan paket {gganimate}. Dengan paket tersebut, kita dapat membuat objek animasi. Hal ini telah didemonstrasikan pada @sec-kreasi-animasi. Selanjutnya, kita dapat merender objek animasi tersebut dan menyimpannya ke dalam sebuah fail. Hal ini telah dipaparkan pada @sec-simpan-animasi.\n\nAnimasi tetap memiliki kekurangan. Kita hanya bisa melihat animasi tersebut, tanpa melakukan interaksi. Apakah kita dapat membuat diagram yang tak hanya efisien, tetapi juga interaktif? Iya, kita dapat membuat diagram yang interaktif dengan R. Untuk mengetahui caranya, silakan pantau [pos selanjutnya](/pos/2024-08-statistik-dinamis-dan-interaktif/index.qmd \"Membuat Statistik Menjadi Dinamis dan Interaktif\").\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}