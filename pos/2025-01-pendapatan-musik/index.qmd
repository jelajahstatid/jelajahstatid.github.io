---
title: "Visualisasi Data Pendapatan Industri Musik"
subtitle: "Dari Pemrograman R Sampai Observable JS"
description: "Banyak cara untuk memvisualisasikan data secara efektif. Artikel ini mendemonstrasikan bagaimana memvisualisasikan data pendapatan industri musik di AS dengan menggunakan {ggplot2} dan {plotly}. Cara tersebut dilakukan dengan menggunakan pemrograman R. Tak hanya itu, artikel ini juga mendemonstrasikan bagaimana memvisualisasikan data tersebut secara interaktif dengan menggunakan Observable Plot."
author:
  - name: Yosep Dwi Kristanto
    url: https://people.usd.ac.id/~ydkristanto/
    affiliation: Pendidikan Matematika, Universitas Sanata Dharma, Yogyakarta
    affiliation-url: https://www.usd.ac.id/s1pmat
    orcid: 0000-0003-1446-0422
date: 2025-01-13
categories:
  - ekonomi
  - musik
  - tutorial
  - visualisasi data
image: "pendapatan_musik.png"
image-alt: |
  Gambar yang menunjukkan pendapatan industri musik di AS berdasarkan format.
keywords: 
  - ekonomi
  - ggplot2
  - JavaScript
  - musik
  - Observable JS
  - Observable Plot
  - plotly
  - pendapatan
copyright: "© 2025 Yosep Dwi Kristanto"
license: "CC BY"
code-annotations: select
editor_options: 
  chunk_output_type: console
---

Aku menulis paragraf ini diringi dengan salah satu lagu hits Sheila On 7, Dan... Tak hanya karena lagu itu enak didengar tetapi juga lagu itu menggiringku untuk bernostalgia ke masa kejayaan kaset. Aku masih ingat betul bagaimana dulu aku merengek minta diantar ke kota untuk berbelanja kaset orisinal album Sheila On 7. Sesampai di rumah aku mainkan kaset itu berulang-ulang, khususnya pada lagu pertama side B itu. Beberapa hari kemudian, kasetnya sudah *ngelokor* tak karuan.

Sekarang aku jadi bertanya-tanya, apakah kamu paham apa yang aku ceritakan di atas? Dugaanku, hanya sedikit yang memahaminya—khususnya tentang kaset dan fenomena *ngelokor*-nya. Paling tidak, dugaanku itu sejalan dengan temuanku ketika tersesat di laman [pangkalan data pendapatan industri musik di Amerika Serika (AS)](https://www.riaa.com/u-s-sales-database/){.external target="_blank"}. Di laman itu, aku mendapati sebuah diagram interaktif nan apik. Silakan amati diagram itu pada @fig-riaa-music-revenue.

![Pendapatan industri musik di AS berdasarkan format](aset/revenues_by_format.png){#fig-riaa-music-revenue fig-alt="Pendapatan industri musik di AS berdasarkan format"}

Meskipun kurang begitu jelas, dari @fig-riaa-music-revenue kita dapat melihat bahwa setelah tahun 2000 pendapatan industri musik dari format kaset dan sejenisnya terus menurun. Bahkan, tak ada lagi pendapatan yang sumbernya dari penjualan kaset dan sejenisnya setelah tahun 2008. Tapi, stop! Kita hentikan sampai di sini interpretasi datanya. Kita apresiasi bagaimana data tersebut dipresentasikan.

Diagram tersebut memberikan contoh penggunaan diagram batang yang efektif, meskipun sumbu horizontalnya menyatakan waktu.[^1] Pemilihan warnanya secara efektif menunjukkan tren dalam data. Misalnya, kita dapat melihat pada @fig-riaa-music-revenue bahwa dari kiri ke kanan warna biru semakin mengecil ketika warna oranye semakin membesar. Hal ini menunjukkan pendapatan industri musik di AS dari format kaset dan sejenisnya semakin menurun seiring adanya format CD.

[^1]: Pada umumnya, diagram garis dipilih untuk menyajikan data yang menyatakan tren (sumbu horizontalnya menyatakan waktu).

Tak hanya itu. Jika kamu mengunjungi [situs web RIAA](https://www.riaa.com/u-s-sales-database/){.external target="_blank"}, kamu dapat berinteraksi dengan diagram tersebut. Kamu dapat memilih pendapatan seperti apa yang ditampilkan—apakah yang disesuaikan dengan inflasi ataukah tidak. Kamu dapat mengatur batasan tahun untuk data yang disajikan. Kamu juga dapat memilih format-format apa saja yang perlu dipresentasikan dalam diagram. Terakhir, kamu dapat menyorot dan mengklik setiap batangnya untuk melihat informasi yang disajikan batang tersebut.

Bisakah kita membuat visualisasi data seperti itu? Tentu bisa! Kita akan membuat visualisasi data itu dengan menggunakan [pemrograman R](https://www.R-project.org/){.external target="_blank"}, khususnya dengan paket [{ggplot2}](https://ggplot2.tidyverse.org){.external target="_blank"} dan [{plotly}](https://plotly-r.com){.external target="_blank"}, dan [Observable JS](https://observablehq.com/){.external target="_blank"}. Untuk melakukan visualisasi data di R, terlebih dahulu kita panggil paket-paket yang kita perlukan.

```{r}
#| message: false
#| warning: false
#| code-fold: false

library(tidyverse) # Paket {ggplot2} masuk dalam {tidyverse}
library(plotly)
```

## Mempersiapkan dan Menjelajah Data {#sec-mempersiapkan-dan-menjelajah-data}

Kita siapkan datanya terlebih dahulu. Data tersebut dapat kita peroleh dari situs web RIAA. Data dari situs itu yang sudah aku rapikan dapat diakses di [GitHub](https://raw.githubusercontent.com/jelajahstatid/jelajahstatid.github.io/refs/heads/main/pos/2025-01-pendapatan-musik/aset/pendapatan_as_riaa.csv){.external target="_blank"}. Mari kita impor data tersebut dengan `read_csv()`.

```{r}
#| code-fold: false

url_fail <- "https://raw.githubusercontent.com/jelajahstatid/jelajahstatid.github.io/refs/heads/main/pos/2025-01-pendapatan-musik/aset/pendapatan_as_riaa.csv"

pendapatan_as_riaa <- read_csv(
  file = url_fail,
  show_col_types = FALSE
)

print(pendapatan_as_riaa)
```

Kita mendapatkan sebuah tibble `pendapatan_as_riaa` yang memiliki lima variabel dan 508 baris. Variabel-variabel tersebut adalah `format`, `grup`, dan `tahun`, serta dua ukuran pendapatan: pendapatan yang tidak disesuaikan dengan inflasi (`pendapatan`) dan yang disesuaikan dengan inflasi (`pendapatan_infl`). Pendapatan tersebut semuanya dalam juta dolar AS.

Untuk mengakrabkan diri dengan data tersebut, mari kita lihat lebih jauh dalam data itu. Apa saja `format` dan `grup` dalam data tersebut? Mari kita selidiki!

```{r}
#| code-fold: false

pendapatan_as_riaa$format |> 
  unique()

pendapatan_as_riaa$grup |> 
  unique()

```

Kita selidiki juga pengkategorian `format` ke dalam `grup`. Kita dapat melakukannya dengan kode berikut.

```{r}
#| code-fold: false

pendapatan_as_riaa |> 
  select(grup, format) |> 
  group_by(grup, format) |> 
  unique() |> 
  ungroup() |> 
  arrange(grup, format) |> 
  print(n = 24)

```

Bagaimana dengan rentangan `tahun`-nya? Dengan menjalankan kode berikut, kita tahu bahwa `tahun`-nya merentang dari 1973 sampai 2023.

```{r}
#| code-fold: false

pendapatan_as_riaa$tahun |> 
  unique() |> 
  sort()

```

Untuk mengkonfirmasi apa yang kukatakan di awal, yaitu pendapatan dari format kaset dan sejenisnya terus menurun setelah tahun 2000, mari kita lihat dari data `pendapatan_as_riaa`.

```{r}
#| code-fold: false

pendapatan_as_riaa |> 
  filter(
    grup == "Tape",
    tahun > as.Date("2000-01-01")
  ) |> 
  group_by(grup, tahun) |> 
  summarise(
    total_pendapatan = sum(pendapatan, na.rm = TRUE),
    total_pendapatan_infl = sum(pendapatan_infl, na.rm = TRUE),
    .groups = "drop"
  )

```

Terkonfirmasi! Pendapatan dari kaset dan sejenisnya terus merosot setelah tahun 2000. Bahkan, pendapatan dari format tersebut menghilang mulai tahun 2009.

## Memvisualisasikan Data dengan {ggplot2} {#sec-visualisasi-data-dengan-ggplot2}

Kita telah akrab dengan data `pendapatan_as_riaa`. Sekarang waktunya untuk memvisualisasikannya. Untuk mendapatan diagram seperti pada @fig-riaa-music-revenue, kita gunakan `geom_col()` dengan `position = "stack"` dan `stat = "identity"`.

```{r}
#| label: fig-ggplot2-awal
#| fig-cap: "Versi awal visualisasi data pendapatan industri musik di AS dengan {ggplot2}"
#| fig-asp: 0.5625
#| code-fold: false

pendapatan_as_riaa |> 
  ggplot(
    aes(x = tahun, y = pendapatan_infl, fill = format)
  ) + 
  geom_col()
```

Untuk awalan, tidak terlalu buruk diagramnya. Tapi kita perlu memodifikasi beberapa hal dari diagram batang pada @fig-ggplot2-awal.

-   Kita definisikan warna-warna diagram batangnya.

-   Kita atur legendanya agar terletak di bawah dan terdiri dari empat kolom.

-   Kita atur urutan level pada variabel `format` agar keterbacaannya membaik.

-   Kita tambahkan judul, anak judul, dan takarir ke dalam diagram, serta kita perbaiki judul sumbu vertikal dan horizontalnya.

Kita jalankan rencana pertama dan ketiga terlebih dahulu dengan membuat objek `urutan_format` dan `pemetaan_format_warna`.

```{r}
#| code-fold: false

# Urutan level pada variabel `format`
urutan_format <- c(
  "LP/EP", "Vinyl Single", "8 - Track",
  "Cassette", "Cassette Single", "Other Tapes",
  "Kiosk", "CD", "CD Single",
  "SACD", "DVD Audio", "Music Video (Physical)",
  "Download Album", "Download Single", "Ringtones & Ringbacks",
  "Download Music Video", "Other Digital", "Synchronization",
  "Paid Subscription", "On-Demand Streaming (Ad-Supported)",
  "Other Ad-Supported Streaming",
  "SoundExchange Distributions",
  "Limited Tier Paid Subscription"
)

# Pemetaan setiap level pada `format` dengan warna
pemetaan_format_warna <- c(
  "LP/EP" = "#2A5784",
  "Vinyl Single" = "#43719F",
  "8 - Track" = "#5B8DB8",
  "Cassette" = "#7AAAD0",
  "Cassette Single" = "#9BC7E4",
  "Other Tapes" = "#BADDF1",
  "Kiosk" = "#E1575A",
  "CD" = "#EE7423",
  "CD Single" = "#F59D3D",
  "SACD" = "#FFC686",
  "DVD Audio" = "#9D7760",
  "Music Video (Physical)" = "#F1CF63",
  "Download Album" = "#7C4D79",
  "Download Single" = "#9B6A97",
  "Ringtones & Ringbacks" = "#BE89AC",
  "Download Music Video" = "#D5A5C4",
  "Other Digital" = "#EFC9E6",
  "Synchronization" = "#BBB1AC",
  "Paid Subscription" = "#24693D",
  "On-Demand Streaming (Ad-Supported)" = "#398949",
  "Other Ad-Supported Streaming" = "#61AA57",
  "SoundExchange Distributions" = "#7DC470",
  "Limited Tier Paid Subscription" = "#B4E0A7"
)

```

Kita jalankan rencana selanjutnya. Untuk melakukannya, kita jalankan kode berikut ini. Hasilnya ditunjukkan pada @fig-ggplot2-infl-akhir.

```{r}
#| label: fig-ggplot2-infl-akhir
#| fig-cap: "Visualisasi data dengan {ggplot2} setelah dilakukan beberapa modifikasi"
#| fig-asp: 0.75
#| code-fold: false

plot_musik <- pendapatan_as_riaa |> 
  mutate(
    format = factor(
      format,
      levels = urutan_format
    )
  ) |> 
  ggplot(
    aes(x = tahun, y = pendapatan_infl, fill = format)
  ) + 
  geom_bar(
    position = "stack",
    stat = "identity"
  ) + 
  scale_fill_manual(
    name = "Format",
    values = pemetaan_format_warna
  ) + 
  guides(
    fill = guide_legend(ncol = 4)
  ) + 
  theme_minimal() + 
  theme(
    axis.title.x = element_blank(),
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.key.spacing.y = unit(.025, "cm"),
    plot.title = element_text(
      face = "bold"
    )
  ) + 
  labs(
    title = "Pendapatan Industri Musik di AS Berdasarkan Format",
    subtitle = "Disesuaikan dengan Inflasi, Nilai Dolar Tahun 2023",
    y = "Pendapatan\n(juta dolar AS)",
    caption = "Data: Recording Industry Association of America (RIAA)"
  )

print(plot_musik)
```

Diagram batang pada @fig-ggplot2-infl-akhir sudah mirip dengan yang ditunjukkan pada @fig-riaa-music-revenue. Diagram tersebut telah efektif menyampaikan informasi tentang pendapatan industri musik berdasarkan formatnya.

## Menambahkan Interaktivitas dengan {plotly} {#sec-menambahkan-interaktivitas-dengan-plotly}

Diagram batang pada @fig-ggplot2-infl-akhir memang sudah efektif dalam menyampaikan informasi pendapatan industri musik di AS berdasarkan formatnya. Meskipun demikian, kita kesulitan dalam mencari informasi yang sifatnya detail. Misalnya, dari gambar tersebut apakah kamu dapat mengetahui besarnya pendapatan dari format download album pada tahun 2010? Sulit, bukan?

Untuk mengatasi masalah tersebut, kita dapat menambahkan interaktivitas ke dalam grafik tersebut dengan [{plotly}](https://plotly-r.com){.external target="_blank"}. Untungnya paket ini dapat kita terapkan terhadap objek ggplot sebelumnya dengan fungsi `ggplotly()`.

```{r}
#| label: fig-plotly
#| fig-cap: "Diagram batang menjadi interaktif dengan {plotly}"
#| fig-asp: 0.5625
#| code-fold: false

ggplotly(
  p = plot_musik
)

```

Kita dapat menyorot batang-batang pada @fig-plotly untuk melihat informasi detailnya. Misalnya, kita dapat mengarahkan kursor ke batang berwarna ungu tua pada tahun 2010. Di situ kita dapat melihat bahwa besarnya pendapatan industri musik dari format download album pada tahun itu adalah 1219,1 juta dolar AS.

Selain itu, kita dapat mengklik satu atau lebih item legenda untuk menghilangkan data yang bersangkutan dari diagram. Kita juga dapat mengklik dua kali item legenda untuk mengisolasinya. Fitur-fitur interaktivitas ini memudahkan kita dalam membaca dan menginterpretasi data.

## Memvisualisasikan Data dengan Observable JS {#sec-memvisualisasikan-data-dengan-observable-js}

Pada @sec-visualisasi-data-dengan-ggplot2 dan @sec-menambahkan-interaktivitas-dengan-plotly kita telah memvisualisasikan data pendapatan industri musik dengan menggunakan pemrograman R. Sekarang, kita akan memvisualisasikannya dengan [Observable JS](https://observablehq.com/){.external target="_blank"}, khususnya [Plot](https://observablehq.com/plot/ "The JavaScript library for exploratory data visualization"){.external target="_blank"}.

Pertama, kita impor data dengan menggunakan `d3.csv()`. Kita masukkan alamat url data kita ke dalam fungsi tersebut. Kita gunakan fungsi `d3.autoType` untuk mengkonversi variabel-variabel dalam data kita ke dalam Date dan numerik secara otomatis. Kita simpan data tersebut dengan nama `pendapatanMusik`.

```{ojs}
//| code-fold: false

csvUrl = "https://raw.githubusercontent.com/jelajahstatid/jelajahstatid.github.io/refs/heads/main/pos/2025-01-pendapatan-musik/aset/pendapatan_as_riaa.csv"
```

```{ojs}
//| code-fold: false

pendapatanMusik = d3.csv(csvUrl, d3.autoType)

```

Setelah itu, kita visualisasikan data tersebut dengan menggunakan tiga objek geometris: rectY, ruleY, dan axisX. Objek geometris rectY kita gunakan untuk membuat persegi panjang vertikal dengan `y: "pendapatan_infl"`, `x: "tahun"`, `fill: "format"`. Kita atur agar persegi panjang tersebut interaktif dengan menambahkan `tip: true`. Objek geometris ruleY kita gunakan untuk membuat garis horizontal yang memotong sumbu-$y$ di $y = 0$. Garis itu adalah sumbu-$x$. Terakhir, kita atur agar tik-tik pada sumbu-$x$ dibuat dengan selang lima tahunan. Pengaturan ini kita lakukan pada objek geometris axisX.

Kita dapat mengatur legenda warnanya pada `color`. Kita atur `legend: true` untuk menampilkan legendanya dan `columns: 4` untuk mengatur banyaknya kolom dalam penyajian item-item legenda tersebut. Kita juga dapat melakukan pengaturan lebih lanjut terhadap `x`, `y`, `caption`, `subtitle`, dan `title`. Hasilnya disajikan pada @fig-obs-plot-dasar.

::: {#fig-obs-plot-dasar}
```{ojs}
//| code-fold: false

Plot.plot({
  x: {label: "Tahun"},
  y: {
    grid: true,
    label: "Pendapatan (juta dolar AS)"
  },
  color: {
    legend: true,
    columns: 4
},
  marks: [
    Plot.barY(pendapatanMusik,{
      y: "pendapatan_infl",
      x: "tahun",
      fill: "format",
      order: null,
      tip: true
    }),
    Plot.ruleY([0]),
    Plot.axisX({ticks: "5 years"})
  ],
  caption: "Data: Recording Industry Association of America (RIAA)",
  subtitle: "Disesuaikan dengan Inflasi, Nilai Dolar Tahun 2023"
})
```

Diagram batang yang dibuat dengan Observable Plot
:::

*Alright!* Kita mendapatkan @fig-obs-plot-dasar yang secara fungsi serupa dengan @fig-plotly. Selanjutnya kita akan memodifikasi diagram tersebut dalam hal tampilan dan interaktivitasnya. Untuk tampilan, kita akan mengatur warnanya agar sama dengan diagram pada @fig-ggplot2-infl-akhir dan @fig-plotly. Kita juga akan menambahkan interaktivitas pada diagram tersebut dengan menambahkan beberapa input.

## Menambahkan Interaktivitas dengan Input Observable {#sec-interaktivitas-input-observable}

Kita tambahkan interaktivitas terhadap @fig-obs-plot-dasar dengan beberapa [input Observable](https://observablehq.com/documentation/inputs/overview){.external target="_blank"}. Ada empat input yang dapat kita tambahkan. Deskripsi keempat input tersebut adalah sebagai berikut.

-   Input pendapatan. Input ini menyediakan pilihan bagi pengguna untuk memilih jenis pendapatan yang divisualisasikan—apakah yang disesuaikan dengan inflasi atau yang tidak.

-   Input format. Input ini memberikan keleluasaan bagi pengguna untuk memilih format-format apa yang akan divisualisasikan.

-   Input rentang tahun. Input ini dapat digunakan pengguna untuk memilih rentang tahun terhadap data yang divisualisasikan. Untuk melakukannya, kita sediakan dua input. Kedua input ini digunakan sebagai batas tahun pertama dan kedua.

Setelah penambahan input-input tersebut, diagram batang interaktifnya disajikan pada @fig-obs-input.

:::: {#fig-obs-input}
```{ojs}
//| panel: input
//| echo: false

viewof pendapatanTerpilih = Inputs.radio(
  new Map([
    ["Tidak disesuaikan dengan inflasi", "pendapatan"],
    ["Disesuaikan dengan inflasi", "pendapatan_infl"]
  ]),
  {label: "Pendapatan", value: "pendapatan_infl"}
)
viewof formatTerpilih = Inputs.select(daftarFormat, {
  multiple: true, 
  label: "Format", 
  value: daftarFormat
})
viewof tahun1 = Inputs.range([1973, 2023], {value: 1973, step: 1, label: "Tahun (batas 1)"})
viewof tahun2 = Inputs.range([1973, 2023], {value: 2023, step: 1, label: "Tahun (batas 2)"})
```

::: panel-tabset
## Plot

```{ojs}
//| echo: false

Plot.plot({
  x: {label: "Tahun"},
  y: {
    grid: true,
    label: "Pendapatan (juta dolar AS)"
  },
  color: {
    legend: true,
    label: "Format",
    columns: 4,
    domain: formatTerpilih,
    range: warnaTerpilih
  },
  style: {width: "100%"},
  marks: [
    Plot.barY(dataTerpilih,
      {y: pendapatanTerpilih, x: "tahun", fill: "format", tip: true} 
    ),
    Plot.ruleY([0]),
    Plot.axisX({ticks: "5 years"})
  ],
  caption: "Data: Recording Industry Association of America (RIAA)",
  subtitle: anakJudul
})
```

## Data

```{ojs}
//| echo: false

Inputs.table(dataTerpilih, {
  sort: "tahun",
  columns: [
    "format",
    "tahun",
    pendapatanTerpilih
  ],
  maxWidth: "100%"
})
```
:::

Diagram batang dan tabel interaktif yang dibuat dengan menggunakan Observable JS
::::

Bagaimana membuat diagram batang yang disertai dengan tabel interaktif seperti yang ditunjukkan pada @fig-obs-input? *Well*, kode lengkapnya dapat kamu lihat dan pelajari [di catatan ini](https://observablehq.com/d/39c7c69c68bb1302){.external target="_blank"}.

```{ojs}
//| echo: false

dataTerpilih = pendapatanMusik.filter(function (pendapatan) {
  return formatTerpilih.includes(pendapatan.format) &&
    tahunMin <= pendapatan.tahun &&
    tahunMaks >= pendapatan.tahun;
})
```

```{ojs}
//| echo: false

tahun1Date = new Date(`${tahun1}`)
tahun2Date = new Date(`${tahun2}`)
tahunMin = new Date(Math.min(tahun1Date, tahun2Date))
tahunMaks = new Date(Math.max(tahun1Date, tahun2Date))
anakJudul = pendapatanTerpilih === "pendapatan" 
  ? null 
  : pendapatanTerpilih === "pendapatan_infl" 
    ? "Disesuaikan dengan Inflasi, Nilai Dolar Tahun 2023" 
    : null
warnaTerpilih = daftarFormat
  .map((f, i) => (formatTerpilih.includes(f) ? warnaFormat[i] : null))
  .filter((color) => color !== null)
```

```{ojs}
//| echo: false

daftarFormat = ["LP/EP", "Vinyl Single", "8 - Track", "Cassette", "Cassette Single",
             "Other Tapes", "Kiosk", "CD", "CD Single", "SACD", "DVD Audio",
             "Music Video (Physical)", "Download Album", "Download Single",
             "Ringtones & Ringbacks", "Download Music Video", "Other Digital",
             "Synchronization", "Paid Subscription", "On-Demand Streaming (Ad-Supported)",
             "Other Ad-Supported Streaming", "SoundExchange Distributions",
             "Limited Tier Paid Subscription"]
```

```{ojs}
//| echo: false

warnaFormat = ["#2A5784", "#43719F", "#5B8DB8", "#7AAAD0", "#9BC7E4", "#BADDF1", 
            "#E1575A", "#EE7423", "#F59D3D", "#FFC686", "#9D7760", "#F1CF63", 
            "#7C4D79", "#9B6A97", "#BE89AC", "#D5A5C4", "#EFC9E6", "#BBB1AC", 
            "#24693D", "#398949", "#61AA57", "#7DC470", "#B4E0A7"]
```

## Catatan Akhir {#sec-catatan-akhir}

Kita telah memvisualisasikan data pendapatan industri musik dengan beragam cara. Pada @sec-visualisasi-data-dengan-ggplot2 dan @sec-menambahkan-interaktivitas-dengan-plotly, kita melakukan visualisasi dengan pemrograman R. Bagian-bagian itu mendemonstrasikan bagaimana membuat diagram dengan menggunakan {ggplot2} dan {plotly}. Kedua paket tersebut sangat membantu untuk melakukan visualisasi data, baik statis maupun dinamis.

Pada @sec-memvisualisasikan-data-dengan-observable-js, kita menggunakan Observable Plot untuk membuat diagram yang serupa. Pada @sec-interaktivitas-input-observable, kita lengkapi diagram tersebut dengan beberapa input untuk membuat diagramnya semakin dinamis. Teknik visualisasi data seperti ini sangat berguna jika kita ingin mempresentasikan data dengan media daring.

Apa selanjutnya? Teknik visualisasi yang didemonstrasikan dalam artikel ini tentu dapat dikembangkan lagi. Misalnya, jika kamu ingin berfokus untuk membuat animasi, kamu dapat menggunakan [{gganimate}](/pos/2024-08-animasi-diagram-statistik/index.qmd "Membuat Diagram Lebih Hidup dengan Animasi"). Kamu ingin menyelam lebih dalam tentang interaktivitas dengan R? Kamu dapat mencoba [{shiny}](/pos/2024-08-statistik-dinamis-dan-interaktif/index.qmd "Membuat Statistik Menjadi Dinamis dan Interaktif"). Terakhir, jika kamu ingin belajar lebih lanjut tentang visualisasi data dengan Observable JS, kamu patut mencoba [D3](https://d3js.org/){.external target="_blank"}.
