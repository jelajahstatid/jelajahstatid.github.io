---
title: "Simulasi Monte Carlo"
subtitle: "Memvisualisasikan Masalah Jarum Buffon"
description: "Bagaimana menggunakan simulasi Monte Carlo untuk menyelesaikan masalah jarum Buffon? Artikel ini akan mendemonstrasikan bagaimana memvisualisasikan dan menganimasikan simulasi Monte Carlo untuk masalah paling awal yang diajukan dan diselesaikan di Peluang Geometris, yaitu masalah jarum Buffon."
author:
  - name: Yosep Dwi Kristanto
    url: https://people.usd.ac.id/~ydkristanto/
    affiliation: Pendidikan Matematika, Universitas Sanata Dharma, Yogyakarta
    affiliation-url: https://www.usd.ac.id/s1pmat
    orcid: 0000-0003-1446-0422
date: 2025-10-22
categories:
  - Peluang
  - Geometri
  - tutorial
image: "sampul-masalah-jarum-buffon.png"
image-alt: "Simulasi masalah jarum Buffon untuk memvisualisasikan peluang jarum melintasi garis"
keywords: 
  - eksperimen
  - Hukum Bilangan Besar
  - masalah jarum Buffon
  - simulasi Monte Carlo
  - trigonometri
lightbox: true
copyright: "© 2025 Yosep Dwi Kristanto"
license: "CC BY"
code-annotations: below
editor_options: 
  chunk_output_type: console
---

Bayangkan kamu bermain sebuah gim. Dalam gim tersebut, kamu memiliki selembar kertas bergaris dan lidi. Panjang lidi tersebut sama dengan jarak antargaris pada kertas itu. Jika lidi tersebut dilemparkan secara acak ke kertas tersebut, kamu perlu menebak apakah lidi tersebut mengenai garis atau tidak. Jika tebakanmu benar, kamu menang. Tebakan mana yang kamu pilih?

Gim itu adalah bentuk adaptasi dari sebuah masalah paling awal yang diajukan dan diselesaikan di [Peluang Geometris](https://doi.org/10.1007/s004070100038 "Nineteenth-Century Developments in Geometric Probability: J. J. Sylvester, M. W. Crofton, J.-É. Barbier, and J. Bertrand"){.external target="_blank"}, masalah jarum Buffon. Masalah ini menarik karena melibatkan peluang dan geometri. Dengan demikian, kita akan memvisualisasikan masalah ini secara geometris untuk dapat melihat berapa peluangnya. Untuk melakukannya, kita menggunakan simulasi Monte Carlo.

## Simulasi Monte Carlo {#sec-simulasi-monte-carlo}

Simulasi Monte Carlo, atau sering dikenal dengan metode Monte Carlo, merupakan sebuah teknik matematis yang digunakan untuk memperkirakan kemungkinan luaran dari kejadian yang tak pasti. Dengan demikian, kita dapat menggunakan simulasi ini terhadap masalah jarum Buffon. Tujuannya beberapa hal, yaitu untuk:

-   membandingkan banyaknya jarum yang memotong garis dan yang tidak dalam sebuah eksperimen;

-   menggunakan [Hukum Bilangan Besar](https://people.usd.ac.id/~ydkristanto/app/hukum-bil-besar/ "Hukum Bilangan Besar"){.external target="_blank"} dan peluang empiris untuk memperkirakan peluang kejadian mendapatkan jarum yang memotong garis;

-   memperkirakan nilai pi ($\pi$).

Selanjutnya, mari kita melakukan tujuan-tujuan tersebut pada bagian berikutnya.

## Simulasi Masalah Jarum Buffon {#sec-simulasi-masalah-jarum-buffon}

Kita menggunakan [pemrograman R](https://www.R-project.org/ "R Foundation for Statistical Computing"){.external target="_blank"} untuk mensimulasikan masalah jarum Buffon. Untuk melakukannya, kita memanfaatkan empat paket, yaitu [{tidyverse}](https://tidyverse.org/ "R packages for Data Science"){.external target="_blank"}, [{scales}](https://CRAN.R-project.org/package=scales "scales: Scale Functions for Visualization"){.external target="_blank"}, [{gganimate}](https://CRAN.R-project.org/package=gganimate "gganimate: A Grammar of Animated Graphics"){.external target="_blank"}, dan [{magick}](https://CRAN.R-project.org/package=magick "magick: Advanced Graphics and Image-Processing in R"){.external target="_blank"}. Mari terlebih dahulu kita memanggil keempat paket tersebut.

```{r}
#| warning: false
#| message: false
#| code-fold: show

library(tidyverse) # <1>
library(scales)    # <2>
library(gganimate) # <3>
library(magick)    # <4>

```

1.  Kita menggunakan {tidyverse} untuk mempersiapkan data dalam mensimulasikan masalah jarum Buffon.
2.  Paket {scales} kita pakai untuk mengatur skala diagram-diagram yang akan kita buat.
3.  Paket {gganimate} kita gunakan untuk menganimasikan simulasi masalah jarum Buffon.
4.  Kita memanfaatkan {magick} untuk menggabungkan gambar-gambar animasi ke dalam sebuah gambar animasi yang tersinkron.

### Deskripsi Masalah {#sec-deskripsi-masalah}

Masalah jarum Buffon kurang lebih deskripsinya adalah sebagai berikut.

> Perhatikan selembar kertas bergaris-garis sejajar yang jarak antargaris berdekatannya $d$ satuan dan sebuah jarum yang panjangnya $l$, dengan $l = d$. Jika kita melemparkan jarum tersebut pada kertas itu secara acak, berapakah peluang jarum tersebut memotong garis pada kertas itu?

Tanpa mengurangi generalisasi, kita dapat mengasumsikan bahwa garis-garis pada kertas itu adalah garis-garis yang horizontal dan jarak antargaris berdekatannya $d=1$ satuan. Dengan demikian, panjang jarumnya $l = d = 1$. Asumsi seperti ini akan memudahkan kita untuk mensimulasikan masalah tersebut.

Terdapat dua elemen penting dalam memvisualisasikan masalah jarum Buffon tersebut, yaitu kertas bergaris dan jarumnya. Kedua elemen tersebut dapat kita visualisasikan dengan {ggplot2}, yang merupakan bagian dari {tidyverse}. Selanjutnya, kita bahas kedua elemen tersebut pada @sec-selembar-kertas dan @sec-sebuah-jarum.

### Selembar Kertas {#sec-selembar-kertas}

Kita memilih kertas yang berukuran 10 × 10. Karena kertas ini bergaris-garis horizontal dan jarak antargaris berdekatannya 1 satuan, kita dapat memvisualisasikannya dengan menggunakan kode pada @lst-kertas-bergaris.

```{r}
#| code-fold: show
#| lst-label: lst-kertas-bergaris
#| lst-cap: "Kode untuk membuat kertas bergaris"

kertas <- ggplot() + 
  geom_hline(             # <1>
    yintercept = 0:10,
    color = "gray80",
    linewidth = .5
  ) + 
  coord_equal(            # <2>
    xlim = c(0, 10),
    ylim = c(0, 10)
  ) + 
  scale_x_continuous(     # <3>
    breaks = 0:10
  ) + 
  scale_y_continuous(     # <4>
    breaks = 0:10
  ) + 
  theme_bw() +            # <5>
  theme(                  # <6>
    axis.title = element_blank(),
    panel.grid = element_blank(),
    plot.margin = unit(c(.5, .5, .5, .5), "cm")
  )

```

1.  Menggunakan `geom_hline()` untuk membuat garis-garis horizontal yang memotong sumbu-$y$ di 0, 1, 2, ..., 10 (`yintercept = 0:10`), berwarna abu-abu (`color = "gray80"`), dan tebalnya 0,5 (`linewidth = .5`).
2.  Mengatur agar skala-$x$ dan $y$ sama, serta jendela diagramnya menampilkan $0 \leq x \leq 10$ dan $0\leq y \leq 10$.
3.  Mengatur agar skala pada sumbu-$x$ menampilkan 0, 1, 2, ..., 10.
4.  Mengatur agar skala pada sumbu-$y$ menampilkan 0, 1, 2, ..., 10.
5.  Memilih tema untuk diagram, yaitu yang kita pilih adalah `theme_bw()`.
6.  Mengatur tema secara lebih lanjut: (1) tidak menampilkan judul pada semua sumbu (`axis.title = element_blank()`), tidak menampilkan kisi-kisi, baik horizontal maupun vertikal (`panel.grid = element_blank()`), dan mengatur pias atas, kanan, bawah, dan kiri (`plot.margin = unit(c(.5, .5, .5, .5), "cm")`).

Selembar kertas yang telah kita buat ditunjukkan pada @fig-kertas-bergaris.

```{r}
#| label: fig-kertas-bergaris
#| fig-cap: "Kertas bergaris horizontal berukuran 10 × 10 yang jarak antargarisnya 1 satuan"
#| fig-asp: 1

kertas

```

### Sebuah Jarum {#sec-sebuah-jarum}

Bagaimana kita dapat membuat jarumnya? Kita dapat memvisualisasikan jarum dalam masalah ini dengan menggunakan ruas garis yang ujung-ujungnya adalah titik-titik $\left( x_{1}, y_{1} \right)$ dan $\left( x_{2}, y_{2} \right)$, perhatikan @fig-sebuah-jarum.

![Sebuah jarum yang direpresentasikan dengan sebuah ruas garis](aset/sebuah-jarum-01.png){#fig-sebuah-jarum}

Koordinat kedua ujung ruas garis tersebut saling berkaitan karena jarak keduanya haruslah $l=1$ satuan. Jika $\theta$ adalah besar sebuah sudut yang dibentuk oleh sebuah sinar garis horizontal ke kanan yang pangkalnya $\left(x_{1},y_{1}\right)$ dan ruas garis tersebut, koordinat $\left( x_{2}, y_{2} \right)$ dapat ditentukan dengan menggunakan @eq-koord-titik-kedua.

$$
\begin{matrix}
x_{2}=x_{1}+1\cdot\cos\left(\theta\right)\\
y_{2}=y_{1}+1\cdot\sin\left(\theta\right)
\end{matrix}
$$ {#eq-koord-titik-kedua}

dengan $0 \leq \theta \leq 2\pi$. Berdasarkan @eq-koord-titik-kedua, kita memerlukan tiga nilai, yaitu $x_{1}$, $y_{1}$, dan $\theta$, untuk membuat sebuah jarum pada kertas. Sebagai contoh, untuk $x_{1}=6$, $y_{1}=\text{5,5}$, dan $\theta=\frac{4}{3}\pi$, jarumnya dapat dibuat dengan menggunakan kode pada @lst-contoh-jarum.

```{r}
#| code-fold: show
#| lst-label: lst-contoh-jarum
#| lst-cap: 'Membuat sebuah jarum dengan $x_{1}=6$, $y_{1}=\text{5,5}$, dan $\theta=\frac{4}{3}\pi$'

x_1 <- 6                # <1>
y_1 <- 5.5              # <1>
t_heta <- 4 / 3 * pi    # <1>

x_2 <- x_1 + 1 * cos(t_heta) # <2>
y_2 <- y_1 + 1 * sin(t_heta) # <2>

contoh_jarum <- ggplot() + 
  geom_hline(
    yintercept = 0:10,
    color = "gray80",
    linewidth = .5
  ) + 
  annotate(             # <3>
    geom = "segment",
    x = x_1, xend = x_2,
    y = y_1, yend = y_2,
    color = "#4269d0",
    linewidth = 1.5
  ) + 
  coord_equal(
    xlim = c(0, 10),
    ylim = c(0, 10)
  ) + 
  scale_x_continuous(
    breaks = 0:10
  ) + 
  scale_y_continuous(
    breaks = 0:10
  ) + 
  theme_bw() + 
  theme(
    axis.title = element_blank(),
    panel.grid = element_blank(),
    plot.margin = unit(c(.5, .5, .5, .5), "cm")
  )

```

1.  Mendefinisikan nilai-nilai yang diketahui, yaitu `x_1`, `y_1`, dan `t_heta`.
2.  Menghitung nilai-nilai `x_2` dan `y_2` berdasarkan @eq-koord-titik-kedua.
3.  Menggunakan `annotate()` untuk membuat representasi sebuah jarum sebagai sebuah ruas garis (`geom = "segment"`), yang ujung-ujungnya di $\left( x_{1}, y_{1} \right)$ dan $\left( x_{2}, y_{2} \right)$ (`x = x_1, xend = x_2, y = y_1, yend = y_2`), berwarna biru (`color = "#4269d0"`), dan tebalnya 1,5 (`linewidth = 1.5`). Kita membuat ruas garis dengan `annotate()` karena ruas garis tersebut tidak tergantung dari data, tetapi kita sediakan nilai-nilai untuk `x`, `y`, `xend`, dan `yend` secara manual.

Jarum yang dihasilkan dari kode pada @lst-contoh-jarum ditunjukkan pada @fig-contoh-jarum.

```{r}
#| label: fig-contoh-jarum
#| fig-cap: 'Sebuah jarum dengan $x_{1}=6$, $y_{1}=\text{5,5}$, dan $\theta=\frac{4}{3}\pi$'
#| fig-asp: 1

contoh_jarum

```

@fig-contoh-jarum memperlihatkan secara jelas bahwa jarumnya memotong sebuah garis. Namun bagaimana kita dapat mengetahui apakah sembarang jarum yang diketahui $x_{1}$, $y_{1}$, dan $\theta$-nya memotong garis atau tidak? Untuk menjawab pertanyaan ini, perhatikan @fig-jarum-dan-garis.

![Jarum-jarum yang memotong garis dan yang tidak](aset/jarum-dan-garis-01.png){#fig-jarum-dan-garis}

Berdasarkan @fig-jarum-dan-garis, kita dapat melihat bahwa jarum yang memotong garis pada kertas nilai $h$-nya lebih besar dari jarak vertikal antara titik tengah jarum tersebut dan garis terdekatnya, yaitu $d_{h}$. Padahal, $h=\frac{1}{2}\cdot\sin\left(\theta_{l}\right)$ degan $\theta_{l}$ adalah sudut lancip yang dibentuk oleh jarum dan garis horizontal.

Perhatikan juga bahwa garis-garis pada kertas yang kita buat pada @lst-kertas-bergaris memiliki koordinat-$y$ yang merupakan bilangan bulat. Dengan demikian, kita mendapatkan $d_{h}=\text{min}\left(\left | y_{t}-\left \lfloor y_{t}\right \rfloor\right |,\left | y_{t}-\left \lceil y_{t}\right \rceil\right |\right)$ dengan $y_{t}$ adalah koordinat-$y$ titik tengah jarum tersebut. Dengan demikian, sebuah jarum yang memotong garis memenuhi kondisi pada @eq-kondisi.

$$
\frac{1}{2}\sin\left(\theta_{l}\right)\geq \text{min}\left(\left | y_{t}-\left \lfloor y_{t}\right \rfloor\right |,\left | y_{t}-\left \lceil y_{t}\right \rceil\right |\right)
$$ {#eq-kondisi}

Kita gunakan kondisi tersebut terhadap jarum pada @fig-contoh-jarum untuk menentukan apakah jarum tersebut memotong garis atau tidak (walaupun faktanya kita telah mengetahuinya).

```{r}
#| code-fold: false
#| lst-label: lst-uji-kondisi
#| lst-cap: 'Menguji kondisi apakah jarumnya memotong garis'

y_t <- (y_1 + (y_1 + sin(t_heta))) / 2 # <1>
theta_l <- abs(t_heta %% pi - pi/2)   # <2>
h <- 1 / 2 * sin(theta_l)             # <3>
d_h <- min(                           # <4>
  abs(y_t - floor(y_t)),              # <4>
  abs(y_t - ceiling(y_t))             # <4>
)

potong_garis <- if_else(                # <5>
  h >= d_h, "Memotong", "Tak memotong"  # <5>
)                                       # <5>

potong_garis                            # <6>

```

1.  Menghitung koordinat-$y$ titik tengah jarum, dan nilainya dinamai dengan `y_t`.
2.  Menentukan sudut lancip $\theta_{l}$ dan hasilnya kita namai dengan `theta_l`.
3.  Menghitung nilai $h$.
4.  Menghitung nilai $d_{h}$ dan hasilnya dinamai dengan `d_h`.
5.  Mendefinisikan kondisi yang telah dibahas sebelumnya, dan hasilnya dinamai dengan `potong_garis`.
6.  Mencetak nilai `potong_garis`.

Kita telah berhasil menggunakan kondisi di atas untuk menentukan apakah jarum pada @fig-contoh-jarum memotong garis atau tidak. Hasilnya sesuai dengan pengamatan kita tentu saja.

### Eksperimen Jarum Buffon {#sec-eksperimen-jarum-buffon}

Sampai di sini kita telah dapat membuat selembar kertas dan sebuah jarum. Kita juga telah mengetahui kondisi jarum tersebut untuk memotong garis pada kertas. Sekarang kita akan memvisualisasikan sebuah eksperimen pelemparan jarum sebanyak $n$ kali, atau selanjutnya kita sebut sebagai eksperimen jarum Buffon. Misalnya, kita memilih $n = 100$ kali. Setiap pelemparan tersebut kita perlu menyediakan tiga nilai, yaitu $x_{1}$, $y_{1}$, dan $\theta$, secara acak. Dalam R, kita dapat menggunakan fungsi `runif()`. Fungsi ini akan memberikan satu atau lebih nilai acak dari distribusi seragam dengan nilai minimum dan maksimum yang diberikan.

Kita buat sebuah data dengan nama `data_eksperimen` untuk memuat hasil eksperimen jarum Buffon sebanyak $n=100$ percobaan. Untuk melakukannya, kita gunakan kode pada @lst-data-eksperimen.

```{r}
#| code-fold: false
#| lst-label: lst-data-eksperimen
#| lst-cap: 'Membuat `data_eksperimen` yang memuat luaran setiap percobaan dalam eksperimen'

set.seed(1234)         # <1>
palet_warna <- c(      # <2>
  "#4269d0","#efb118", # <2>
  "#ff725c","#6cc5b0", # <2>
  "#3ca951","#ff8ab7", # <2>
  "#a463f2","#97bbf5", # <2>
  "#9c6b4e","#9498a0"  # <2>
)                     # <2>

data_eksperimen <- tibble(
  x1 = runif(100, min = 1, max = 9),        # <3>
  y1 = runif(100, min = 1, max = 9),        # <3>
  theta = runif(100, min = 0, max = 2 * pi) # <3>
) |> 
  mutate(                                      # <4>
    percobaan = row_number(),                  # <4>
    x2 = x1 + 1 * cos(theta),                  # <4>
    y2 = y1 + 1 * sin(theta),                  # <4>
    warna = palet_warna[(percobaan %% 10) + 1] # <4>
  )

```

1.  Mengatur benih pengacakan agar hasilnya dapat diproduksi kembali.
2.  Membuat palet warna sebagai warna setiap jarumnya.
3.  Menyediakan bilangan-bilangan `x1`, `y1`, dan `theta` secara acak.
4.  Menghitung `x2` dan `y2`, serta membuat variabel `percobaan` untuk memberikan identitas terhadap setiap percobaannya dan `warna` untuk memberikan warna terhadap setiap jarum yang dihasilkan.

Kita dapat melihat gambaran umum `data_eksperimen` dengan fungsi `glimpse()`.

```{r}
glimpse(data_eksperimen)
```

Kita telah memiliki `data_eksperimen` yang memiliki tujuh variabel dan 100 baris. Baris-baris tersebut menggambarkan hasil percobaannya.

Selanjutnya, kita akan menentukan apakah setiap percobaan dalam `data_eksperimen` menghasilkan jarum yang memotong garis atau tidak. Untuk melakukannya, kita menerapkan ide pada @lst-uji-kondisi untuk membuat variabel baru, yaitu `potong`, dalam data tersebut. Perhatikan @lst-data-eksperimen-lengkap!

```{r}
#| code-fold: false
#| lst-label: lst-data-eksperimen-lengkap
#| lst-cap: 'Menambahkan informasi apakah jarumnya memotong garis atau tidak'

data_eksperimen <- data_eksperimen |> 
  mutate(                                # <1>
    yt = (y1 + y2) / 2,
    theta_l = abs(theta %% pi - pi/2),
    h = 1 / 2 * sin(theta_l),
    d_h = pmin(
      abs(yt - floor(yt)),
      abs(yt - ceiling(yt))
    ),
    potong = if_else(                    # <2>
      h >= d_h,
      "Memotong",
      "Tak memotong"
    )
  )

```

1.  Menggunakan ide pada @lst-uji-kondisi dengan menambahkan variabel-variabel `yt`, `theta_l`, `h`, `d_h` dan `potong` ke dalam `data_eksperimen`.
2.  Variabel `potong` akan bernilai "Memotong" jika `h >= d_h`. Jika sebaliknya, variabel ini akan bernilai "Tak memotong".

Kita cek apakah `data_eksperimen` saat ini telah memuat informasi jarumnya memotong garis atau tidak.

```{r}
glimpse(data_eksperimen)
```

Data yang kita miliki telah memuat informasi yang kita perlukan. Kita dapat melakukan analisis sederhana terhadap `data_eksperimen` tersebut. Misalnya, kita dapat melihat berapa jarum yang memotong garis dan yang tidak dengan kode pada @lst-analisis-dasar-data-eksperimen.

```{r}
#| code-fold: show
#| lst-label: lst-analisis-dasar-data-eksperimen
#| lst-cap: 'Menghitung banyak jarum yang memotong garis dan yang tidak'

data_eksperimen |> 
  group_by(potong) |> 
  summarise(
    frekuensi = n()
  )

```

### Visualisasi Hasil Eksperimen {#sec-visualisasi-hasil-eksperimen}

Kita dapat memvisualisasikan hasil 100 percobaan dalam `data_eksperimen`. Dengan menggunakan `x1`, `y1`, `x2`, dan `y2`, kita dapat menggambarkan jarum yang dihasilkan oleh setiap percobaan. Kita dapat melakukannya dengan kode pada @lst-vis-hasil-eksperimen.

```{r}
#| code-fold: show
#| lst-label: lst-vis-hasil-eksperimen
#| lst-cap: 'Memvisualisasikan setiap luaran dalam eksperimen'

hasil_eksperimen <- data_eksperimen |> 
  ggplot() + 
  geom_hline(
    yintercept = 0:10,
    color = "gray80",
    linewidth = 0.5
  ) + 
  geom_segment(                # <1> 
    aes(
      x = x1, y = y1,
      xend = x2, yend = y2,
      color = warna
    ),
    linewidth = 1.5
  ) + 
  coord_equal(
    xlim = c(0, 10),
    ylim = c(0, 10)
  ) + 
  scale_x_continuous(
    breaks = 0:10
  ) + 
  scale_y_continuous(
    breaks = 0:10
  ) + 
  scale_color_identity() +      # <2>
  theme_bw() + 
  theme(
    legend.position = "none",
    axis.title = element_blank(),
    panel.grid = element_blank(),
    plot.margin = unit(c(.5, .5, .5, .5), "cm")
  )

```

1.  Berbeda dengan yang kita lakukan pada @lst-contoh-jarum, kita sekarang menggunakan `geom_segment()` untuk membuat ruas-ruas garis. Hal ini dikarenakan kita membuat ruas-ruas garis tersebut berdasarkan setiap baris dalam `data_eksperimen`.
2.  Kita menggunakan `scale_color_identity()` karena kita ingin agar pemetaan kita pada `geom_segment()` tentang warna, yaitu `color = warna`, bernilai persis sama dengan nilai variabel `warna`-nya (tanpa melalui penskalaan).

Visualisasi luaran 100 percobaan eksperimen jarum Buffon yang dihasilkan dari @lst-vis-hasil-eksperimen, ditunjukkan pada @fig-vis-hasil-eksperimen.

```{r}
#| label: fig-vis-hasil-eksperimen
#| fig-cap: 'Hasil pelemparan secara acak 100 jarum pada selembar kertas'
#| fig-asp: 1

hasil_eksperimen
```

Sebelumnya kita telah mengetahui berapa banyak jarum yang memotong garis dan yang tidak. Kita juga dapat mengetahui persentasenya juga. Kedua informasi ini dapat kita visualisasikan, seperti yang disajikan pada @fig-diag-batang-potong!

```{r}
#| label: fig-diag-batang-potong
#| fig-cap: 'Hasil eksperimen jarum Buffon'
#| fig-subcap: 
#|   - 'Frekuensi hasil setiap percobaan: Memotong dan Tak memotong'
#|   - 'Frekuensi relatif hasil setiap percobaan'
#| fig-asp: 1
#| layout-ncol: 2

data_eksperimen |> 
  ggplot(aes(x = potong, fill = potong)) + 
  geom_bar() + 
  scale_fill_manual(
    values = c(
      "Memotong" = "#4269d0",
      "Tak memotong" = "#ff725c"
    )
  ) + 
  theme_minimal() + 
  theme(
    legend.position = "none",
    axis.title.x = element_blank()
  ) + 
  labs(
    y = "Frekuensi"
  )

data_eksperimen |> 
  mutate(
    potong = factor(potong, levels = c("Tak memotong", "Memotong"))
  ) |> 
  ggplot(aes(x = 1, fill = potong)) + 
  geom_bar(position = "fill") + 
  scale_y_continuous(
    labels = percent_format(),
    breaks = seq(from = 0, to = 1, by = .1)
  ) + 
  scale_fill_manual(
    values = c(
      "Tak memotong" = "#ff725c",
      "Memotong" = "#4269d0"
    ),
    name = "Hasil percobaan",
    breaks = c("Memotong", "Tak memotong")
  ) + 
  theme_minimal() + 
  theme(
    legend.position = "bottom",
    axis.title.x = element_blank(),
    axis.text.x = element_blank()
  ) + 
  labs(
    y = "Frekuensi relatif"
  )

```

Berdasarkan @fig-diag-batang-potong-2, kita dapat mengetahui bahwa peluang empiris jarumnya memotong garis adalah 60% atau 0,6. Bagaimana dengan peluang empirisnya pada percobaan pertama, kedua, ketiga, dan seterusnya sampai ke-100? Untuk itu, kita hitung terlebih dahulu peluang empirisnya untuk setiap percobaannya dengan menggunakan kode pada @lst-peluang-empiris.

```{r}
#| code-fold: false
#| lst-label: lst-peluang-empiris
#| lst-cap: 'Menghitung peluang empiris untuk setiap percobaan'
data_eksperimen <- data_eksperimen |> 
  mutate(                                 # <1>
    potong_numerik = if_else(
      potong == "Memotong", 1, 0
    ),
    peluang_empiris = cumsum(potong_numerik) / percobaan                                 # <2>
  )

glimpse(data_eksperimen)

```

1.  Kita tambahkan variabel `potong_numerik` yang nilainya 1 jika variabel `potong` bernilai "Memotong", dan nilainya 0 jika `potong` bernilai "Tak memotong".
2.  Kita hitung peluang empiris memperoleh jarum yang memotong garis.

Sekarang, kita dapat memvisualisaikan perubahan peluang empirisnya dari satu percobaan ke percobaan lainnya. Visualisasi semacam ini akan lebih membantu jika kita juga menambahkan peluang teoretisnya. Peluang teoretis tersebut adalah $\frac{2}{\pi}$. Nanti kamu dapat melihat pembahasan tentang peluang teoretis ini pada [Catatan @nte-peluang-teoretis]. Kita gunakan informasi tersebut untuk membuat kode visualisasinya, seperti yang ditunjukkan pada @lst-tren-peluang-empiris.

```{r}
#| code-fold: show
#| lst-label: lst-tren-peluang-empiris
#| lst-cap: 'Membuat visualisasi tren peluang empiris'

tren_p_empiris <- data_eksperimen |> 
  ggplot(
    aes(x = percobaan, y = peluang_empiris)  # <1>
  ) + 
  geom_hline(                                # <2>
    yintercept = 2 / pi,
    linetype = "dashed",
    color = "gray50"
  ) + 
  geom_line(                                 # <3>
    color = "gray80",
    linewidth = 1
  ) + 
  geom_point(                                # <4>
    aes(color = warna)
  ) + 
  coord_cartesian(                           # <5>
    ylim = c(0, 1)
  ) + 
  scale_color_identity() + 
  theme_minimal() + 
  labs(
    x = "Percobaan",
    y = "Peluang empiris"
  )

```

1.  Kita atur pemetaan variabel-variabel dalam data ke grafik yang akan kita buat, yaitu `x = percobaan, y = peluang_empiris`.
2.  Kita gunakan `geom_hline()` untuk membuat garis horizontal yang merepresentasikan peluang teoretisnya, yaitu `yintercept = 2 / pi`.
3.  Kita gunakan `geom_line()` untuk membuat diagram garis yang berwarna `color = "gray80"` dan tebalnya `linewidth = 1`.
4.  Kita gunakan `geom_point()` untuk membuat titik-titik yang merepresentasikan peluang empiris setiap percobaannya. Titik-titik ini kita atur agar warnanya `color = warna` agar sesuai dengan warna jarum-jarumnya.
5.  Kita atur agar sumbu-$y$-nya menampilkan skala semua kemungkinan peluang empirisnya, yaitu mulai dari 0 sampai 1, dengan menginputkan argumen \``ylim = c(0, 1)` terhadap `coord_cartesian()`.

Untuk melihat hasil @lst-tren-peluang-empiris, silakan perhatikan @fig-tren-peluang-empiris!

```{r}
#| label: fig-tren-peluang-empiris
#| fig-cap: 'Tren peluang empiris'
#| fig-asp: 0.5625

tren_p_empiris

```

Kita juga dapat memvisualisasikan apakah setiap percobaan dalam eksperimen tersebut menghasilkan jarum yang memotong garis atau tidak dengan menggunakan @eq-kondisi. Caranya, kita merepresentasikan setiap percobaan dalam eksperimen tersebut dengan titik $\left(\theta_{l},d_{h}\right)$. Jika titik tersebut di bawah kurva $y=\frac{1}{2}\sin\left(x\right)$, percobaannya menghasilkan jarum yang memotong garis. Kita gunakan ide seperti ini untuk membuat kode visualisasi pada @lst-luaran-percobaan-sin.

```{r}
#| code-fold: show
#| lst-label: lst-luaran-percobaan-sin
#| lst-cap: 'Memvisualisasikan hasil setiap percobaan dalam eksperimen'

data_kurva_sin <- tibble(               # <1>
  x = seq(0, pi / 2, length.out = 400)
) |> 
  mutate(y = 0.5 * sin(x))

hasil_percobaan <- data_eksperimen |> 
  ggplot(
    aes(x = theta_l, y = d_h)           # <2>
  ) +
  geom_line(                            # <3>
    data = data_kurva_sin,
    aes(x = x, y = y),
    color = "#efb118",
    linewidth = 1,
    inherit.aes = FALSE
  ) + 
  geom_point(                           # <4>
    aes(color = potong),
    size = 3
  ) +
  scale_color_manual(                   # <5>
    values = c(
      "Memotong" = "#4269d0",
      "Tak memotong" = "#ff725c"
    ),
    name = "Hasil percobaan"
  ) +
  theme_minimal() + 
  theme(
    legend.position = "bottom"
  ) + 
  labs(
    x = expression(theta[l]),
    y = expression(d[h])
  )

```

1.  Kita siapkan `data_kurva_sin` untuk selanjutnya digunakan untuk membuat kurva $y=\frac{1}{2} \sin \left( x \right)$.
2.  Kita atur pemetaan data dan diagramnya, yaitu `x = theta_l, y = d_h`.
3.  Kita menggunakan `geom_line()` untuk membuat kurva sinus dengan menggunakan `data_kurva_sin`.
4.  Kita merepresentasikan setiap percobaannya dengan titik dan menggunakan pemetaan yang kita definisikan pada nomor 2.
5.  Kita mengatur warna titik-titik yang merepresentasikan jarum yang "Memotong" dan "Tak memotong".

Dari kode pada @lst-luaran-percobaan-sin, kita mendapatkan visualisasi yang disajikan pada @fig-luaran-percobaan-sin.

```{r}
#| label: fig-luaran-percobaan-sin
#| fig-cap: 'Hasil setiap percobaan dalam eksperimen'
#| fig-asp: 0.5625

hasil_percobaan

```

::: {#nte-peluang-teoretis .callout-note}
## Peluang Teoretis

@fig-luaran-percobaan-sin sangat intuitif untuk menentukan peluang teoretis kejadian mendapatkan jarum yang memotong garis pada kertas. Tentu untuk kasus kita di sini adalah $l=1=d$ karena gambar tersebut diperoleh dari asumsi tersebut.

Perhatikan lagi @fig-luaran-percobaan-sin. Apa yang terjadi jika eksperimen yang kita lakukan memuat tak hingga percobaan? Di bawah kurva $y=\frac{1}{2}\sin\left(x\right)$ akan penuh dengan titik-titik biru, yang merepresentasikan kejadian mendapatkan jarum yang memotong garis. Secara lebih spesifik, sebanyak tak hingga titik biru tersebut akan mengisi daerah di bawah $y=\frac{1}{2}\sin\left(x\right)$ dan di atas $y=0$, serta di kanan $x=0$ dan di kiri $x=\frac{\pi}{2}$.

Padahal, semua kemungkinan posisi titik-titik dalam eksperimen tersebut adalah daerah di dalam persegi panjang yang dibatasi oleh $y=\frac{1}{2}$, $y = 0$, $x=0$, dan $x=\frac{\pi}{2}$. Dengan demikian, peluang teoretis mendapatkan kejadian jarum yang melewati garis sama dengan membagi luas daerah yang mungkin ditempati oleh titik-titik biru dengan luas daerah persegi panjang tersebut. Secara matematis, hal ini dapat dihitung seperti berikut.

$$
\begin{aligned}P &= \frac{\displaystyle \int_{0}^{\frac{\pi}{2}} \frac{1}{2} \sin(x)\,dx}{\displaystyle \frac{\pi}{2} \cdot \frac{1}{2}} \\[6pt]  &= \frac{2}{\pi} \left[ -\cos(x) \right]_{0}^{\frac{\pi}{2}} \\[6pt]  &= \frac{2}{\pi} \bigl( -\cos(\tfrac{\pi}{2}) + \cos(0) \bigr) \\[6pt]  &= \frac{2}{\pi}\end{aligned}
$$

Dari perhitungan tersebut kita menemukan bahwa peluang teoretisnya adalah $\frac{2}{\pi}$. Untuk kasus-kasus lainnya, yaitu untuk sembarang $l$ dan $d$, kamu dapat mencari ide dari laman [Wikipedia](https://en.wikipedia.org/w/index.php?title=Buffon%27s_needle_problem&oldid=1314721513 "Buffon's needle problem"){.external target="_blank"} atau [Wolfram Mathworld](https://mathworld.wolfram.com/BuffonsNeedleProblem.html "Buffon's Needle Problem"){.external target="_blank"}, misalnya.
:::

## Membuat Simulasi Menjadi Lebih Hidup {#sec-membuat-simulasi-menjadi-lebih-hidup}

Pada @sec-simulasi-masalah-jarum-buffon kita telah memahami masalah jarum Buffon dengan simulasi Monte Carlo dan memvisualisasikan hasil eksperimennya. Kita dapat menjadikan simulasi masalah tersebut menjadi lebih hidup dengan menggunakan animasi. Teknik penggunaan animasi ini juga telah kita bahas pada [pos sebelumnya](/pos/2024-08-animasi-diagram-statistik/index.qmd "Membuat Diagram Lebih Hidup dengan Animasi"). Selain itu, kita juga akan menambah banyak percobaannya menjadi $n=1000$ kali.

Pertama yang kita lakukan adalah mempersiapkan datanya. Untuk melakukannya, kita menggunakan alur kerja yang serupa dengan yang telah kita lakukan dari @lst-data-eksperimen, @lst-data-eksperimen-lengkap, sampai @lst-peluang-empiris. Kita rangkum alur kerja tersebut untuk membuat fungsi `eksperimen_buffon()` pada @lst-fungsi-data-eksperimen.

```{r}
#| code-fold: show
#| lst-label: lst-fungsi-data-eksperimen
#| lst-cap: 'Membuat data eksperimen pelemparan jarum secara acak'

eksperimen_buffon <- function(n = 100) {
  set.seed(1234)
  palet_warna <- c(
  "#4269d0","#efb118",
  "#ff725c","#6cc5b0",
  "#3ca951","#ff8ab7",
  "#a463f2","#97bbf5",
  "#9c6b4e","#9498a0"
)   
  tibble(
    x1 = runif(n, 1, 9),
    y1 = runif(n, 1, 9),
    theta = runif(n, 0, 2 * pi),
    percobaan = 1:n
  ) |> 
    mutate(
      x2 = x1 + 1 * cos(theta),
      y2 = y1 + 1 * sin(theta),
      warna = palet_warna[(percobaan %% length(palet_warna)) + 1],
      yt = (y1 + y2) / 2,
      theta_l = abs(theta %% pi - pi/2),
      h = 1 / 2 * sin(theta_l),
      d_h = pmin(
        abs(yt - floor(yt)),
        abs(yt - ceiling(yt))
      ),
      potong = if_else(
        h >= d_h, "Memotong", "Tak memotong"
      ),
      potong_numerik = if_else(
      potong == "Memotong", 1, 0
    ),
    peluang_empiris = cumsum(potong_numerik) / percobaan
    )
}

```

Fungsi `eksperimen_buffon()` dapat kita gunakan untuk membuat data hasil eksperimen masalah jarum Buffon dengan input `n`, yaitu banyaknya percobaan dalam eksperimen tersebut. Dengan demikian, jika kita ingin membuat `data_eksperimen` yang memuat $n=1000$ percobaan, kita manfaatkan fungsi tersebut seperti pada @lst-seribu-percobaan.

```{r}
#| code-fold: show
#| lst-label: lst-seribu-percobaan
#| lst-cap: 'Membuat `data_eksperimen` dengan 1000 percobaan'

data_eksperimen <- eksperimen_buffon(1000)

```

Untuk melihat secara sekilas hasil eksperimen yang dimuat dalam `data_eksperimen` tersebut, kita dapat menggunakan `glimpse()`.

```{r}
#| code-fold: true

glimpse(data_eksperimen)
```

Berdasarkan luaran di atas, kita dapat melihat bahwa `data_eksperimen` tersebut memiliki 14 variabel, mulai dari `x1`, `y1`, `theta`, sampai `peluang_empiris`. Data tersebut juga memuat 1000 baris yang setiap barisnya merupakan hasil percobaan dalam eksperimen. Dengan demikian, kita mendapatkan `data_eksperimen` yang kita kehendaki.

### Animasi Eksperimen Jarum Buffon {#sec-animasi-eksperimen-jarum-buffon}

Data eksperimen 1000 percobaan telah siap. Berikutnya, kita akan membuat visualisasi seperti pada @fig-vis-hasil-eksperimen, tetapi dengan menggunakan animasi. Dalam animasi tersebut, kita buat agar jarumnya tampak jatuh ke kertas secara bergiliran. Kita lakukan hal ini dengan kode pada @lst-animasi-jarum-jatuh.

```{r}
#| code-fold: show
#| lst-label: lst-animasi-jarum-jatuh
#| lst-cap: 'Menganimasikan jarum yang jatuh ke kertas'

plot_anim_jarum <- data_eksperimen |> 
  ggplot() + 
  geom_hline(
    yintercept = 0:10,
    color = "gray80",
    linewidth = 0.5
  ) + 
  geom_segment(
    aes(
      x = x1, y = y1,
      xend = x2, yend = y2,
      group = percobaan,
      color = warna
    ),
    linewidth = 1.5
  ) + 
  coord_equal(
    xlim = c(0, 10),
    ylim = c(0, 10)
  ) + 
  scale_x_continuous(
    breaks = 0:10
  ) + 
  scale_y_continuous(
    breaks = 0:10
  ) + 
  scale_color_identity() + 
  theme_bw() + 
  theme(
    legend.position = "none",
    axis.title = element_blank(),
    panel.grid = element_blank(),
    plot.margin = unit(c(.5, .5, .5, .5), "cm")
  ) + 
  transition_reveal(along = percobaan)

```

Sekarang kita telah memiliki objek `plot_anim_jarum`. Objek tersebut merupakan objek gganim yang menyajikan animasi eksperimen pelemparan jarum ke kertas. Apabila kita perhatikan kode pada @lst-animasi-jarum-jatuh hampir sama persis dengan kode pada @lst-vis-hasil-eksperimen untuk membuat @fig-vis-hasil-eksperimen. Perbedaannya hanya pada penambahan `group = percobaan` pada pemetaan variabel dalam `geom_segment()` dan `transition_reveal()`.

Fungsi `transition_reveal()` merupakan fungsi dari {gganimate} yang digunakan untuk membuat animasi yang menampilkan data secara bertahap berdasarkan urutan sebuah variabel. Agar animasinya memunculkan hasil percobaan 1; 1 dan 2; 1, 2, dan 3; dan seterusnya, kita perlu menambahkan argumen `along = percobaan` untuk membuat animasi tersebut dimunculkan berdasarkan nilai variabel `percobaan`.

Selain itu, kita juga perlu menambahkan `group = percobaan` untuk memberitahu `ggplot()` agar setiap data jarum dalam satu percobaan adalah satu kelompok data sendiri. Hal ini untuk mencegah `ggplot()` agar tidak menyambungkan satu jarum dari suatu percobaan dengan jarum dari percobaan lainnya.

Ingin tahu bagaimana animasinya? Untuk mengetahuinya, kita cetak objek `plot_anim_jarum`. Hasilnya disajikan pada @fig-animasi-jarum-jatuh.

```{r}
#| label: fig-animasi-jarum-jatuh
#| fig-cap: 'Animasi yang mengilustrasikan eksperimen masalah jarum Buffon yang memuat 1000 percobaan'
#| fig-asp: 1

plot_anim_jarum
```

*Voilà!* Kita telah berhasil menganimasikan eksperimen 1000 percobaan jarum Buffon.

### Animasi Peluang Empiris {#sec-animasi-peluang-empiris}

Kita dapat menganimasikan bagaimana perubahan peluang empiris eksperimen jarum Buffon, dari satu percobaan ke percobaan lainnya. Dengan kata lain, kita akan menganimasikan @fig-tren-peluang-empiris.

Untuk melakukannya, kita tambahkan `transition_reveal(along = percobaan)` terhadap kode yang membuat @fig-tren-peluang-empiris, yaitu @lst-tren-peluang-empiris. Dengan demikian, kode untuk membuat animasi tersebut ditunjukkan pada @lst-anim-tren-p-empiris.

```{r}
#| code-fold: show
#| lst-label: lst-anim-tren-p-empiris
#| lst-cap: 'Membuat animasi tren peluang empiris'

plot_anim_p_empiris <- data_eksperimen |> 
  ggplot(aes(x = percobaan, y = peluang_empiris)) + 
  geom_hline(
    yintercept = 2 / pi,
    linetype = "dashed",
    color = "gray50"
  ) + 
  geom_line(
    color = "gray80",
    linewidth = 1
  ) + 
  geom_point(
    aes(color = warna, group = percobaan)
  ) + 
  coord_cartesian(
    ylim = c(0, 1)
  ) + 
  scale_color_identity() + 
  theme_minimal() + 
  labs(
    x = "Percobaan",
    y = "Peluang empiris"
  ) + 
  transition_reveal(
    along = percobaan
  )
```

Kita telah membuat objek gganim `plot_anim_p_empiris`. Bagaimana animasi yang terbentuk? Perhatikan @fig-anim-p-empiris!

```{r}
#| label: fig-anim-p-empiris
#| fig-cap: 'Ilustrasi perubahan peluang empiris dari satu percobaan ke percobaan berikutnya'
#| fig-asp: 0.5625

plot_anim_p_empiris

```

### Animasi Estimasi Nilai $\pi$ {#sec-animasi-estimasi-nilai-pi}

@fig-anim-p-empiris menunjukkan bahwa semakin besar percobaannya, nilai peluang empirisnya semakin mendekati nilai peluang teoretisnya, yaitu $\frac{2}{\pi}$. Jika $P_{\text{empiris}}$ menotasikan nilai peluang empiris tersebut, kita mendapatkan @eq-p-empiris.

$$
P_{\text{empiris}} \approx \frac{2}{\pi}
$$ {#eq-p-empiris}

Atau dengan kata lain, kita juga dapat menyatakan @eq-p-empiris menjadi @eq-pendekatan-pi.

$$
\pi \approx \frac{2}{P_{\text{empiris}}}
$$ {#eq-pendekatan-pi}

Nah, oleh karena itu kita dapat menggunakan nilai variabel dalam `p_empiris` dalam `data_eksperimen` untuk mendekati nilai $\pi$. Kita lakukan hal ini dengan kode pada @lst-mendekati-pi.

```{r}
#| code-fold: show
#| lst-label: lst-mendekati-pi
#| lst-cap: 'Membuat estimasi nilai $\pi$ dalam `data_eksperimen`'

data_eksperimen <- data_eksperimen |> 
  mutate(
    estimasi_pi = 2 / peluang_empiris
  )

```

Sekarang kita membuat animasi yang serupa dengan @fig-anim-p-empiris, tetapi yang akan kita plot adalah nilai-nilai variabel `estimasi_pi`. Kita melakukannya dengan kode pada @lst-anim-mendekati-pi.

```{r}
#| lst-label: lst-anim-mendekati-pi
#| lst-cap: 'Membuat animasi estimasi nilai $\pi$'

plot_anim_mendekati_pi <- data_eksperimen |> 
  ggplot(aes(x = percobaan, y = estimasi_pi)) + 
  geom_hline(
    yintercept = pi,
    linetype = "dashed",
    color = "gray50"
  ) + 
  geom_line(
    color = "gray80",
    linewidth = 1
  ) + 
  geom_point(
    aes(color = warna, group = percobaan)
  ) + 
  scale_color_identity() + 
  theme_minimal() + 
  labs(
    x = "Percobaan",
    y = "Estimasi pi"
  ) + 
  transition_reveal(
    along = percobaan
  )

```

@fig-anim-mendekati-pi mengilustrasikan bagaimana eksperimen jarum Buffon dapat digunakan untuk mengestimasi nilai $\pi$.

```{r}
#| label: fig-anim-mendekati-pi
#| fig-cap: 'Eksperimen jarum Buffon untuk mendekati nilai $\pi$'
#| fig-asp: 0.5625

plot_anim_mendekati_pi
```

Berdasarkan hasil eksperimen jarum Buffon yang terdata dalam `data_eksperimen`, kita dapat melihat estimasi nilai $\pi$-nya pada percobaan yang terakhir, yaitu percobaan ke-1000. Berapa nilai estimasinya? Mari kita lihat bersama-sama.

```{r}
est_pi <- data_eksperimen$estimasi_pi[1000]
est_pi
```

Ternyata, kita mendapatkan nilai estimasinya sekitar 3,1847. Nilai estimasi ini tentu akan semakin dekat ke nilai $\pi$ yang sebenarnya jika banyaknya percobaannya semakin besar.

### Animasi Hasil Setiap Percobaan {#sec-animasi-hasil-setiap-percobaan}

Hasil setiap percobaan dalam eksperimen jarum Buffon juga dapat kita animasikan. Hal ini serupa dengan @fig-luaran-percobaan-sin. Dengan cara yang serupa dengan pembuatan animasi-animasi sebelumnya, kita dapat melakukannya dengan kode pada @lst-anim-hasil-percobaan.

```{r}
#| code-fold: show
#| lst-label: lst-anim-hasil-percobaan
#| lst-cap: 'Membuat animasi hasil setiap percobaan'

plot_anim_hasil_percobaan <- data_eksperimen |> 
  ggplot(aes(x = theta_l, y = d_h)) +
  geom_line(
    data = data_kurva_sin,
    aes(x = x, y = y),
    color = "#efb118",
    linewidth = 1,
    inherit.aes = FALSE
  ) + 
  geom_point(
    aes(
      color = potong,
      group = percobaan
    ),
    size = 3
  ) +
  scale_color_manual(
    values = c(
      "Memotong" = "#4269d0",
      "Tak memotong" = "#ff725c"
    ),
    name = "Hasil percobaan"
  ) +
  theme_minimal() + 
  theme(
    legend.position = "bottom"
  ) + 
  labs(
    x = expression(theta[l]),
    y = expression(d[h])
  ) + 
  transition_reveal(
    along = percobaan
  )

```

Untuk melihat hasilnya, kita dapat mencetak objek gganim `plot_anim_hasil_percobaan` yang dihasilkan pada @lst-anim-hasil-percobaan. Hasil animasinya disajikan pada @fig-anim-hasil-percobaan.

```{r}
#| label: fig-anim-hasil-percobaan
#| fig-cap: 'Animasi hasil setiap percobaan dalam eksperimen jarum Buffon'
#| fig-asp: 0.5625

plot_anim_hasil_percobaan

```

### Gabungan Animasi {#sec-gabungan-animasi}

Seringkali gabungan animasi memberikan informasi yang lebih kaya daripada animasi tunggal. Misalnya, bagaimana menurutmu jika kita dapat mengatur agar animasi pada @fig-animasi-jarum-jatuh dan @fig-anim-p-empiris berdampingan? Selain kita dapat melihat eksperimen jarum Buffon, secara simultan kita juga dapat mengamati tren peluang empirisnya. Itulah yang akan kita lakukan. Untuk melakukannya, kita dapat menggunakan kode pada @lst-gif-buffon-p-empiris.

::: {#lst-gif-buffon-p-empiris}
``` r
# Membuat animasi eksperimen jarum Buffon
gif_anim_jarum <- animate(
  plot_anim_jarum,
  width = 360,
  height = 360,
  nframes = 200,
  fps = 10
)

# Membuat animasi tren peluang empiris
gif_anim_p_empiris <- animate(
  plot_anim_p_empiris,
  width = 360,
  height = 360,
  nframes = 200,
  fps = 10
)

# Membaca animasi sebagai kumpulan frame gambar
mgif_anim_jarum <- image_read(gif_anim_jarum)
mgif_anim_p_empiris <- image_read(gif_anim_p_empiris)

# Menggabungkan frame pertama dari kedua animasi secara berdampingan
gif_buffon_p_empiris <- image_append(
  c(mgif_anim_jarum[1], mgif_anim_p_empiris[1])
)

# Menggabungkan semua frame berikutnya satu per satu
for(i in 2:200){
  kombinasi <- image_append(
    c(mgif_anim_jarum[i], mgif_anim_p_empiris[i])
  )
  gif_buffon_p_empiris <- c(
    gif_buffon_p_empiris,
    kombinasi
  )
}

# Menyimpan hasil gabungan sebagai satu fail gif
anim_save(
  filename = "gif_buffon_p_empiris.gif",
  animation = gif_buffon_p_empiris
)
```

Menyandingkan animasi eksperimen jarum Buffon dan peluang empirisnya
:::

Kode pada @lst-gif-buffon-p-empiris menghasilkan animasi yang berupa gambar gif. Animasi tersebut ditunjukkan pada @fig-gif-buffon-p-empiris.

![Ilustrasi eksperimen jarum Buffon dan peluang empirisnya](aset/gif_buffon_p_empiris.gif){#fig-gif-buffon-p-empiris}

Dengan cara yang serupa, kita juga dapat menyandingkan animasi yang disajikan pada @fig-animasi-jarum-jatuh dan @fig-anim-mendekati-pi. Animasi tersebut ditunjukkan pada @fig-gif-buffon-mendekati-pi.

![Ilustrasi eksperimen jarum Buffon untuk mendekati nilai pi](aset/gif_buffon_mendekati_pi.gif){#fig-gif-buffon-mendekati-pi}

Kita juga dapat menyandingkan animasi yang disajikan pada @fig-animasi-jarum-jatuh dan @fig-anim-hasil-percobaan. Animasi tersebut ditunjukkan pada @fig-gif-buffon-hasil-percobaan.

![Ilustrasi eksperimen jarum Buffon dan hasil setiap percobaannya](aset/gif_buffon_hasil_percobaan.gif){#fig-gif-buffon-hasil-percobaan}

## Catatan Akhir {#sec-catatan-akhir}

Kita telah belajar banyak hal melalui masalah jarum Buffon. Pertama, kita telah mengetahui apa itu simulasi Monte Carlo pada @sec-simulasi-monte-carlo. Simulasi itu kita gunakan untuk mengilustrasikan masalah jarum Buffon pada @sec-simulasi-masalah-jarum-buffon. Pada bagian itu kita memahami secara detail masalah jarum Buffon, khususnya pada @sec-deskripsi-masalah. Pada @sec-selembar-kertas kita membuat "kanvas" untuk masalah tersebut, yaitu selembar kertas bergaris-garis. Pada @sec-sebuah-jarum kita memvisualisasikan sebuah jarum. Selain itu, kita juga menemukan kondisi agar jarumnya memotong garis pada kertas. Pada @sec-eksperimen-jarum-buffon dan @sec-visualisasi-hasil-eksperimen, kita melakukan eksperimen jarum Buffon dan memvisualisasikan hasilnya.

Tak hanya itu. Kita juga membuat visualisasi hasil eksperimen jarum Buffon menjadi lebih hidup dengan memanfaatkan animasi. Hal ini kita lakukan pada @sec-membuat-simulasi-menjadi-lebih-hidup. Pada @sec-gabungan-animasi, kita menggabungkan animasi-animasi yang dihasilkan untuk menyampaikan pesan yang lebih efektif dan efisien. Misalnya, @fig-gif-buffon-p-empiris menampilkan pesan yang kuat bahwa peluang empirisnya semakin mendekati ke nilai tertentu, yaitu $\frac{2}{\pi}$, ketika percobaannya semakin banyak, sembari kita memantau apa yang terjadi dengan eksperimennya.

Artikel ini memiliki keterbatasan. Pertama adalah penggunaan asumsi bahwa panjang jarumnya adalah $l = 1$ dan jarak antargaris pada kertasnya adalah $d = 1$. Kamu dapat mengeksplorasi lebih lanjut bagaimana jika panjang jarumnya lebih panjang daripada jarak antargarisnya, ataupun sebaliknya. Selain itu, pembuatan jarum dalam artikel ini menggunakan koordinat satu titik ujung dan besar sudut kemiringannya, untuk menentukan koordinat titik ujung lainnya. Kamu dapat menggunakan cara lain. Misalnya, diketahui koordinat titik tengah jarum dan besar sudutnya, lalu gunakan informasi tersebut untuk menentukan kedua titik ujung jarumnya. Selamat mencoba!
